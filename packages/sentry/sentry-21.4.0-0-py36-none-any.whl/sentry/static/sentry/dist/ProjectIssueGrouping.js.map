{"version":3,"sources":["webpack:///./app/data/forms/projectIssueGrouping.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"names":["route","groupingConfigField","name","type","deprecatedSelectControl","label","t","saveOnBlur","saveMessageAlertType","saveMessage","selectionInfoFunction","args","groupingConfigs","value","selection","find","id","changelog","Changelog","ChangelogTitle","tct","version","dangerouslySetInnerHTML","__html","marked","choices","map","hidden","toString","key","isHidden","help","visible","features","has","fields","fingerprintingRules","hideLabel","placeholder","multiline","monospace","autosize","inline","maxRows","formatMessageValue","RuleDescription","pattern","docs","href","RuleExample","groupingEnhancements","validate","groupingConfig","secondaryGroupingConfig","secondaryGroupingExpiry","space","p","theme","innerBorder","backgroundSecondary","fontSizeMedium","borderRadius","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","undefined","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","length","every","formPanelProps","shouldDisplayForm","forms","location","state","formGroup","i","renderForm","PropTypes","UnstyledSettingsPageHeader","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","gray400","fontSizeLarge","SettingsPageHeader","UpgradeGrouping","organization","projectId","project","onUpgrade","api","hasAccess","includes","byId","updateNotes","riskLevel","latestGroupingConfig","forEach","cfg","latest","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","getGroupingRisk","noUpdates","newData","handleUpgrade","addLoadingMessage","requestPromise","slug","method","data","response","clearIndicators","ProjectActions","handleXhrErrorResponse","linebreak","onConfirm","priority","confirmText","message","params","routeTitleGen","orgId","endpoint","Set","jsonFormProps","link","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","fetchData"],"mappings":"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","file":"ProjectIssueGrouping.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {GroupingConfigItem} from 'app/components/events/groupingInfo';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport marked from 'app/utils/marked';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/issue-grouping/';\n\nconst groupingConfigField: Field = {\n  name: 'groupingConfig',\n  type: 'select',\n  deprecatedSelectControl: false,\n  label: t('Grouping Config'),\n  saveOnBlur: false,\n  saveMessageAlertType: 'info',\n  saveMessage: t(\n    'Changing grouping config will apply to future events only (can take up to a minute).'\n  ),\n  selectionInfoFunction: args => {\n    const {groupingConfigs, value} = args;\n    const selection = groupingConfigs.find(({id}) => id === value);\n    const changelog = selection?.changelog || '';\n    if (!changelog) {\n      return null;\n    }\n    return (\n      <Changelog>\n        <ChangelogTitle>\n          {tct('New in version [version]', {version: selection.id})}:\n        </ChangelogTitle>\n        <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n      </Changelog>\n    );\n  },\n  choices: ({groupingConfigs}) =>\n    groupingConfigs.map(({id, hidden}) => [\n      id.toString(),\n      <GroupingConfigItem key={id} isHidden={hidden}>\n        {id}\n      </GroupingConfigItem>,\n    ]),\n  help: t('Sets the grouping algorithm to be used for new events.'),\n  visible: ({features}) => features.has('set-grouping-config'),\n};\n\nexport const fields: Record<string, Field> = {\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Fingerprint Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'error.type:MyException -> fingerprint-value\\nstack.function:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing fingerprint rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <React.Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to modify the fingerprint rules on the server with custom rules.\n        Rules follow the pattern [pattern]. To learn more about fingerprint rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob -&gt; fingerprint, values</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2Fserver-side-fingerprinting%2F\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# force all errors of the same type to have the same fingerprint\nerror.type:DatabaseUnavailable -> system-down\n# force all memory allocation errors to be grouped together\nstack.function:malloc -> memory-allocation-error`}\n        </RuleExample>\n      </React.Fragment>\n    ),\n    visible: true,\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Stack Trace Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'stack.function:raise_an_exception ^-group\\nstack.function:namespace::* +app'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t(\n      'Changing stack trace rules will apply to future events only (can take up to a minute).'\n    ),\n    formatMessageValue: false,\n    help: () => (\n      <React.Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern]. To learn more about stack trace rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob [^v]?[+-]flag</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/data-management/event-grouping/stack-trace-rules/\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# remove all frames above a certain function from grouping\nstack.function:panic_handler ^-group\n# mark all functions following a prefix in-app\nstack.function:mylibrary_* +app`}\n        </RuleExample>\n      </React.Fragment>\n    ),\n    validate: () => [],\n    visible: true,\n  },\n  groupingConfig: groupingConfigField,\n  secondaryGroupingConfig: {\n    ...groupingConfigField,\n    name: 'secondaryGroupingConfig',\n    label: t('Fallback/Secondary Grouping Config'),\n    help: t(\n      'Sets the secondary grouping algorithm that should be run in addition to avoid creating too many new groups. Controlled by expiration date below.'\n    ),\n  },\n  secondaryGroupingExpiry: {\n    name: 'secondaryGroupingExpiry',\n    type: 'number',\n    label: t('Expiration date of secondary grouping'),\n    help: t(\n      'If this UNIX timestamp is in the past, the secondary grouping configuration stops applying automatically.'\n    ),\n  },\n};\n\nconst RuleDescription = styled('div')`\n  margin-bottom: ${space(1)};\n  margin-top: -${space(1)};\n  margin-right: 36px;\n`;\n\nconst RuleExample = styled('pre')`\n  margin-bottom: ${space(1)};\n  margin-right: 36px;\n`;\n\nconst Changelog = styled('div')`\n  position: relative;\n  top: -1px;\n  margin-bottom: -1px;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  background: ${p => p.theme.backgroundSecondary};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border: 0;\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ChangelogTitle = styled('h3')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.75)} !important;\n`;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {EventGroupingConfig, Organization, Project} from 'app/types';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport marked from 'app/utils/marked';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\ntype Props = {\n  groupingConfigs: EventGroupingConfig[];\n  organization: Organization;\n  projectId: string;\n  project: Project;\n  onUpgrade: () => void;\n  api: Client;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n}: Props) {\n  const hasAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = !latestGroupingConfig;\n\n  const newData: Record<string, string> = {};\n  if (latestGroupingConfig) {\n    newData.groupingConfig = latestGroupingConfig.id;\n  }\n\n  const handleUpgrade = async () => {\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectActions.updateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  };\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  function getModalMessage() {\n    return (\n      <React.Fragment>\n        <TextBlock>\n          <strong>{t('Upgrade Grouping Strategy')}</strong>\n        </TextBlock>\n        <TextBlock>\n          {t(\n            'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n          )}\n        </TextBlock>\n        <TextBlock>\n          <strong>{t('New Behavior')}</strong>\n          <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n        </TextBlock>\n        <TextBlock>\n          <Alert type={alertType}>{riskNote}</Alert>\n        </TextBlock>\n      </React.Fragment>\n    );\n  }\n\n  function getButtonTitle() {\n    if (!hasAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id=\"upgrade-grouping\">\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <Field\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <Confirm\n            disabled={noUpdates}\n            onConfirm={handleUpgrade}\n            priority={riskLevel >= 2 ? 'danger' : 'primary'}\n            confirmText={t('Upgrade')}\n            message={getModalMessage()}\n          >\n            <div>\n              <Button\n                disabled={!hasAccess || noUpdates}\n                title={getButtonTitle()}\n                type=\"button\"\n                priority={riskLevel >= 2 ? 'danger' : 'primary'}\n              >\n                {t('Upgrade Grouping Strategy')}\n              </Button>\n            </div>\n          </Confirm>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig, Project} from 'app/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  updateNotes: string;\n  riskLevel: number;\n  latestGroupingConfig: EventGroupingConfig | null;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(\n  riskLevel: number\n): {\n  riskNote: React.ReactNode;\n  alertType: React.ComponentProps<typeof Alert>['type'];\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {fields} from 'app/data/forms/projectIssueGrouping';\nimport {t, tct} from 'app/locale';\nimport {EventGroupingConfig, Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectDebugSymbols extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['groupingConfigs', '/grouping-configs/']];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectActions.updateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params} = this.props;\n    const {orgId, projectId} = params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2F\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectDebugSymbols;\n"],"sourceRoot":""}