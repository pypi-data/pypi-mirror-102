{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/components/radio.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"names":["Breadcrumbs","crumbs","linkLastItem","props","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","space","subText","IconChevron","checkedCss","css","radioSize","active","growIn","disabled","Radio","border","defaultProps","type","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","BuilderBreadCrumbs","hasMetricAlerts","alertName","t","push","StyledBreadcrumbs","RadioPanelGroup","value","choices","onChange","Container","role","aria-labelledby","id","name","extraContent","RadioPanel","RadioLineItem","aria-checked","aria-label","checked","e","Panel","AlertWizard","alertOption","setState","this","organization","project","location","state","metricRuleTemplate","AlertWizardRuleTemplates","features","includes","dataset","Dataset","pathname","slug","query","createFromWizard","referrer","priority","hideIcon","projectId","params","panelContent","AlertWizardPanelContent","StyledPageHeader","Styledh2","WizardBody","WizardOptions","AlertWizardOptions","i","categoryHeading","options","OptionsWrapper","alertType","AlertWizardAlertNames","WebVitalAlertTypes","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","PanelDescription","description","docsLink","href","WizardBodyPlaceholder","height","ExampleHeader","symbol","examples","example","ExampleItem","renderCreateAlertButton","React","PageHeader","Placeholder","fontSizeExtraLarge","innerBorder","PanelBody","fontSizeLarge","ListItem","fontSizeMedium","Set","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","fcp","custom","aggregate","eventTypes","EventTypes","TransactionFilterOptions","transactionSummaryRouteWithQuery","transaction","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","environment","statsPeriod","start","end","SidebarSpacer"],"mappings":"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","file":"ProjectAlertsWizard.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport {css} from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport {growIn} from 'app/styles/animations';\nimport {Theme} from 'app/utils/theme';\n\ntype Props = {radioSize?: 'small'};\n\ntype CheckedProps = React.HTMLProps<HTMLInputElement> & {\n  theme: Theme;\n} & Props;\n\nconst checkedCss = (p: CheckedProps) => css`\n  display: block;\n  width: ${p.radioSize === 'small' ? '8px' : '1rem'};\n  height: ${p.radioSize === 'small' ? '8px' : '1rem'};\n  border-radius: 50%;\n  background-color: ${p.theme.active};\n  animation: 0.2s ${growIn} ease;\n  opacity: ${p.disabled ? 0.4 : null};\n`;\n\nconst Radio = styled('input')<{radioSize?: 'small'}>`\n  display: flex;\n  padding: 0;\n  width: ${p => (p.radioSize === 'small' ? '16px' : '1.5em')};\n  height: ${p => (p.radioSize === 'small' ? '16px' : '1.5em')};\n  position: relative;\n  border-radius: 50%;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  background: none;\n  appearance: none;\n\n  /* TODO(bootstrap): Our bootstrap CSS adds this, we can remove when we remove that */\n  margin: 0 !important;\n\n  &:focus,\n  &.focus-visible {\n    outline: none !important;\n    border: 1px solid ${p => p.theme.border};\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n\n  &:checked:after {\n    content: '';\n    ${checkedCss}\n  }\n`;\n\nRadio.defaultProps = {\n  type: 'radio',\n};\n\nexport default Radio;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return <DocumentTitle title={`${docTitle} - Sentry`}>{children}</DocumentTitle>;\n}\n\nexport default SentryDocumentTitle;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  hasMetricAlerts: boolean;\n  orgSlug: string;\n  title: string;\n  projectSlug: string;\n  alertName?: string;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {hasMetricAlerts, orgSlug, title, alertName, projectSlug} = props;\n  const crumbs: Crumb[] = [\n    {\n      to: hasMetricAlerts\n        ? `/organizations/${orgSlug}/alerts/`\n        : `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preserveGlobalSelection: true,\n    },\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preserveGlobalSelection: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'app/components/panels';\nimport Radio from 'app/components/radio';\nimport space from 'app/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  label: string;\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  value: string | null;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <PanelBody>\n          <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n            <Radio\n              radioSize=\"small\"\n              aria-label={id}\n              checked={value === id}\n              onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n            />\n            <div>{name}</div>\n            {extraContent}\n          </RadioLineItem>\n        </PanelBody>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nexport const RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  grid-gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: ${space(1.5)};\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled(Panel)`\n  margin: 0;\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport PageHeading from 'app/components/pageHeading';\nimport {PanelBody} from 'app/components/panels';\nimport Placeholder from 'app/components/placeholder';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport Tag from 'app/components/tag';\nimport {t} from 'app/locale';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'app/views/settings/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardOptions,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n  WebVitalAlertTypes,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  alertOption: AlertType | null;\n};\nclass AlertWizard extends React.Component<Props, State> {\n  state: State = {\n    alertOption: null,\n  };\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    this.setState({alertOption});\n  };\n\n  renderCreateAlertButton() {\n    const {organization, project, location} = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = alertOption && AlertWizardRuleTemplates[alertOption];\n    const disabled =\n      !organization.features.includes('performance-view') &&\n      metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${project.slug}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n    return (\n      <CreateAlertButton\n        organization={organization}\n        projectSlug={project.slug}\n        priority=\"primary\"\n        to={to}\n        disabled={disabled}\n        hideIcon\n      >\n        {t('Set Conditions')}\n      </CreateAlertButton>\n    );\n  }\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = alertOption && AlertWizardPanelContent[alertOption];\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n        <PageContent>\n          <Feature features={['organizations:alert-wizard']}>\n            <BuilderBreadCrumbs\n              hasMetricAlerts={hasMetricAlerts}\n              orgSlug={organization.slug}\n              projectSlug={projectId}\n              title={t('Create Alert Rule')}\n            />\n            <StyledPageHeader>\n              <PageHeading>{t('What should we alert you about?')}</PageHeading>\n            </StyledPageHeader>\n            <Styledh2>{t('Errors')}</Styledh2>\n            <WizardBody>\n              <WizardOptions>\n                {AlertWizardOptions.map(({categoryHeading, options}, i) => (\n                  <OptionsWrapper key={categoryHeading}>\n                    {i > 0 && <Styledh2>{categoryHeading}</Styledh2>}\n                    <RadioPanelGroup\n                      choices={options.map(alertType => {\n                        return [\n                          alertType,\n                          AlertWizardAlertNames[alertType],\n                          ...(WebVitalAlertTypes.has(alertType)\n                            ? [<Tag key={alertType}>{t('Web Vital')}</Tag>]\n                            : []),\n                        ] as [AlertType, string, React.ReactNode];\n                      })}\n                      onChange={this.handleChangeAlertOption}\n                      value={alertOption}\n                      label=\"alert-option\"\n                    />\n                  </OptionsWrapper>\n                ))}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                {panelContent && alertOption && (\n                  <WizardPanelBody>\n                    <Styledh2>{AlertWizardAlertNames[alertOption]}</Styledh2>\n                    <PanelDescription>\n                      {panelContent.description}{' '}\n                      {panelContent.docsLink && (\n                        <ExternalLink href={panelContent.docsLink}>\n                          {t('Learn more')}\n                        </ExternalLink>\n                      )}\n                    </PanelDescription>\n                    <WizardBodyPlaceholder height=\"250px\" />\n                    <ExampleHeader>{t('Examples')}</ExampleHeader>\n                    <List symbol=\"bullet\">\n                      {panelContent.examples.map((example, i) => (\n                        <ExampleItem key={i}>{example}</ExampleItem>\n                      ))}\n                    </List>\n                  </WizardPanelBody>\n                )}\n                {this.renderCreateAlertButton()}\n              </WizardPanel>\n            </WizardBody>\n          </Feature>\n        </PageContent>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(4)};\n`;\n\nconst WizardBodyPlaceholder = styled(Placeholder)`\n  background-color: ${p => p.theme.border};\n  opacity: 0.6;\n`;\n\nconst Styledh2 = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  border-right: 1px solid ${p => p.theme.innerBorder};\n  padding-right: ${space(3)};\n`;\n\nconst WizardPanel = styled('div')<{visible?: boolean}>`\n  position: sticky;\n  top: 20px;\n  padding: 0;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  margin-bottom: ${space(2)};\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('div')`\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: ${space(2)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport default AlertWizard;\n","import {t} from 'app/locale';\nimport {Dataset, EventTypes} from 'app/views/settings/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'fcp'\n  | 'custom';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  fcp: t('First Contentful Paint'),\n  custom: t('Custom Metric'),\n};\n\nexport const AlertWizardOptions: {\n  categoryHeading: string;\n  options: AlertType[];\n}[] = [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n      'fcp',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  docsLink?: string;\n  examples: string[];\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. You can set an alert for new issues, issue state changes, and frequency of errors or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n  },\n  throughput: {\n    description: t('Throughput is the number of transactions in a period of time.'),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n  },\n  failure_rate: {\n    description: t('Failure rate is the percentage of unsuccessful transactions.'),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and we recommend LCP is less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and recommend it be less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  fcp: {\n    description: t(\n      'First Contentful Paint (FCP), like Largest Contentful Paint (LCP), measures loading performance. It marks the point when content such as text and images can first be seen on a page.'\n    ),\n    examples: [t('When the average FCP of a page is longer than 0.25 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP) and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(tags[sentry:user])',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fcp: {\n    aggregate: 'p95(measurements.fcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n};\n","import styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport space from 'app/styles/space';\n\nimport {DisplayModes} from './charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  display?: DisplayModes;\n  trendFunction?: string;\n  trendColumn?: string;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n    },\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"sourceRoot":""}