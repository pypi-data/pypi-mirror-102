{"version":3,"sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/index.tsx","webpack:///./app/views/alerts/list/sparkLine.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/list/styles.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///./images/spot/alerts-empty-state.svg"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","SentryDocumentTitle","title","orgSlug","projectSlug","docTitle","AlertHeader","router","organization","activeTab","alertRulesLink","to","slug","t","BorderlessHeader","StyledLayoutHeaderContent","StyledLayoutTitle","Actions","gap","iconProps","size","priority","referrer","showPermissionGuide","onClick","e","preventDefault","navigateTo","href","icon","aria-label","TabLayoutHeader","underlined","features","hasFeature","Layout","ButtonBar","Onboarding","actions","AlertsImage","src","emptyStateImg","ButtonList","DOCS_URL","getQueryStatus","status","includes","IncidentsList","this","props","params","location","query","incidentsQuery","expand","orgId","incidentList","state","length","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","alertRules","promptsCheck","organizationId","id","feature","prompt","dismissedTime","promptsUpdate","external","isCircled","description","tct","link","renderBody","incidentListPageLinks","allProjectsFromIncidents","Set","flatten","map","projects","checkingForAlertRules","undefined","showLoadingIndicator","tryRenderOnboarding","StyledPanelHeader","PaddedTitleAndSparkLine","tryRenderEmpty","slugs","Array","from","initiallyLoaded","incident","key","projectsLoaded","filteredStatus","pageLinks","pathname","openIncidentsQuery","omit","closedIncidentsQuery","showDateSelector","fullWidth","StyledButtonBar","merged","active","barId","renderList","AsyncComponent","IncidentsListContainer","trackView","nextProps","trackAnalyticsEvent","eventKey","eventName","organization_id","type","hookName","renderDisabled","renderNoAccess","React","TitleAndSparkLine","PanelHeader","withOrganization","Sparklines","SparklinesLine","SparkLine","error","eventStats","SparklineError","SparkLinePlaceholder","data","value","isArray","count","fallback","data-test-id","width","height","style","stroke","fill","strokeWidth","StyledSparkLine","Placeholder","makeRuleDetailsQuery","timeWindowMillis","alertRule","timeWindow","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","memoize","find","project","getIncidentMetricPreset","identifier","date","CreatedResolvedTime","isResolved","IncidentStatus","isWarning","color","text","StatusIndicator","stats","started","duration","Date","as","alertLink","isIssueAlert","AlertRuleStatus","originalAlertRuleId","alert","IncidentPanelItem","Title","renderStatusIndicator","IncidentLink","ErrorLoadingStatsIcon","ProjectBadge","avatarSize","getProject","renderTimeSince","seconds","getDynamicText","fixed","overflowEllipsis","IdBadge","Link","PanelItem","fontSizeMedium","TableLayout","TIME_OPTIONS","label","TimePeriod","ALERT_RULE_DETAILS_DEFAULT_PERIOD","TIME_WINDOWS","TimeWindow","TransactionFilterOptions","transactionSummaryRouteWithQuery","transaction","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","environment","statsPeriod","SidebarSpacer","module","exports"],"mappings":"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","file":"AlertsList.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return <DocumentTitle title={`${docTitle} - Sentry`}>{children}</DocumentTitle>;\n}\n\nexport default SentryDocumentTitle;\n","import React from 'react';\nimport {InjectedRouter} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport * as Layout from 'app/components/layouts/thirds';\nimport {IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\n\ntype Props = {\n  router: InjectedRouter;\n  organization: Organization;\n  activeTab: 'stream' | 'rules';\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <React.Fragment>\n      <BorderlessHeader>\n        <StyledLayoutHeaderContent>\n          <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n        </StyledLayoutHeaderContent>\n        <Layout.HeaderActions>\n          <Actions gap={1}>\n            <CreateAlertButton\n              organization={organization}\n              iconProps={{size: 'sm'}}\n              priority=\"primary\"\n              referrer=\"alert_stream\"\n              showPermissionGuide\n            >\n              {t('Create Alert Rule')}\n            </CreateAlertButton>\n            <Button\n              onClick={handleNavigateToSettings}\n              href=\"#\"\n              icon={<IconSettings size=\"sm\" />}\n              aria-label=\"Settings\"\n            />\n          </Actions>\n        </Layout.HeaderActions>\n      </BorderlessHeader>\n      <TabLayoutHeader>\n        <Layout.HeaderNavTabs underlined>\n          <Feature features={['alert-list']} organization={organization}>\n            {({hasFeature}) =>\n              !hasFeature ? (\n                <React.Fragment>\n                  <Feature features={['incidents']} organization={organization}>\n                    <li className={activeTab === 'stream' ? 'active' : ''}>\n                      <GlobalSelectionLink\n                        to={`/organizations/${organization.slug}/alerts/`}\n                      >\n                        {t('Metric Alerts')}\n                      </GlobalSelectionLink>\n                    </li>\n                  </Feature>\n                  {alertRulesLink}\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  {alertRulesLink}\n                  <li className={activeTab === 'stream' ? 'active' : ''}>\n                    <GlobalSelectionLink\n                      to={`/organizations/${organization.slug}/alerts/`}\n                    >\n                      {t('History')}\n                    </GlobalSelectionLink>\n                  </li>\n                </React.Fragment>\n              )\n            }\n          </Feature>\n        </Layout.HeaderNavTabs>\n      </TabLayoutHeader>\n    </React.Fragment>\n  );\n};\n\nexport default AlertHeader;\n\nconst BorderlessHeader = styled(Layout.Header)`\n  border-bottom: 0;\n\n  /* Not enough buttons to change direction for mobile view */\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    flex-direction: row;\n  }\n`;\n\nconst StyledLayoutHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: 0;\n  margin-right: ${space(2)};\n`;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst TabLayoutHeader = styled(Layout.Header)`\n  padding-top: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    padding-top: ${space(1)};\n  }\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'app/components/buttonBar';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\nimport omit from 'lodash/omit';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconCheckmark} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {Incident} from '../types';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\nconst DEFAULT_QUERY_STATUS = 'open';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\nfunction getQueryStatus(status: any): 'open' | 'closed' {\n  return ['open', 'closed'].includes(status) ? status : DEFAULT_QUERY_STATUS;\n}\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location, organization} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n    const incidentsQuery = {\n      ...query,\n      ...(organization.features.includes('alert-details-redesign')\n        ? {expand: ['original_alert_rule']}\n        : {}),\n      status,\n    };\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params && params.orgId}/incidents/`,\n        {query: incidentsQuery},\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <React.Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert Rule')}\n        </CreateAlertButton>\n      </React.Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  tryRenderEmpty() {\n    const {hasAlertRule, incidentList} = this.state;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    if (!incidentList || incidentList.length > 0) {\n      return null;\n    }\n\n    return (\n      <EmptyMessage\n        size=\"medium\"\n        icon={<IconCheckmark isCircled size=\"48\" />}\n        title={\n          !hasAlertRule\n            ? t('No metric alert rules exist for the selected projects.')\n            : status === 'open'\n            ? t('No unresolved metric alerts in the selected projects.')\n            : t('No resolved metric alerts in the selected projects.')\n        }\n        description={tct('Learn more about [link:Metric Alerts]', {\n          link: <ExternalLink href={DOCS_URL} />,\n        })}\n      />\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(incidentList?.map(({projects}) => projects))\n    );\n    const checkingForAlertRules =\n      incidentList && incidentList.length === 0 && hasAlertRule === undefined\n        ? true\n        : false;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    return (\n      <React.Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <Panel>\n            {!loading && (\n              <StyledPanelHeader>\n                <TableLayout status={status}>\n                  <PaddedTitleAndSparkLine status={status}>\n                    <div>{t('Alert')}</div>\n                    {status === 'open' && <div>{t('Graph')}</div>}\n                  </PaddedTitleAndSparkLine>\n                  <div>{t('Project')}</div>\n                  <div>{t('Triggered')}</div>\n                  {status === 'closed' && <div>{t('Duration')}</div>}\n                  {status === 'closed' && <div>{t('Resolved')}</div>}\n                </TableLayout>\n              </StyledPanelHeader>\n            )}\n            {showLoadingIndicator ? (\n              <LoadingIndicator />\n            ) : (\n              this.tryRenderEmpty() ?? (\n                <PanelBody>\n                  <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                    {({initiallyLoaded, projects}) =>\n                      incidentList.map(incident => (\n                        <AlertListRow\n                          key={incident.id}\n                          projectsLoaded={initiallyLoaded}\n                          projects={projects as Project[]}\n                          incident={incident}\n                          orgId={orgId}\n                          filteredStatus={status}\n                          organization={organization}\n                        />\n                      ))\n                    }\n                  </Projects>\n                </PanelBody>\n              )\n            )}\n          </Panel>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, location, organization, router} = this.props;\n    const {pathname, query} = location;\n    const {orgId} = params;\n\n    const openIncidentsQuery = omit({...query, status: 'open'}, 'cursor');\n    const closedIncidentsQuery = omit({...query, status: 'closed'}, 'cursor');\n\n    const status = getQueryStatus(query.status);\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader organization={organization} showDateSelector={false}>\n          <AlertHeader organization={organization} router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <StyledButtonBar merged active={status}>\n                  <Button\n                    to={{pathname, query: openIncidentsQuery}}\n                    barId=\"open\"\n                    size=\"small\"\n                  >\n                    {t('Unresolved')}\n                  </Button>\n                  <Button\n                    to={{pathname, query: closedIncidentsQuery}}\n                    barId=\"closed\"\n                    size=\"small\"\n                  >\n                    {t('Resolved')}\n                  </Button>\n                </StyledButtonBar>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass IncidentsListContainer extends React.Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.location.query?.status !== this.props.location.query?.status) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {location, organization} = this.props;\n    const status = getQueryStatus(location.query.status);\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_stream.viewed',\n      eventName: 'Alert Stream: Viewed',\n      organization_id: organization.id,\n      status,\n    });\n  }\n\n  renderNoAccess() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        features={['organizations:incidents']}\n        organization={organization}\n        hookName=\"feature-disabled:alerts-page\"\n        renderDisabled={this.renderNoAccess}\n      >\n        <IncidentsList {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  width: 100px;\n  margin-bottom: ${space(1)};\n`;\n\nconst PaddedTitleAndSparkLine = styled(TitleAndSparkLine)`\n  padding-left: ${space(2)};\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  /* Match table row padding for the grid to align */\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default withOrganization(IncidentsListContainer);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Placeholder from 'app/components/placeholder';\nimport theme from 'app/utils/theme';\nimport {IncidentStats} from 'app/views/alerts/types';\n\n// Height of sparkline\nconst SPARKLINE_HEIGHT = 38;\n\ntype Props = {\n  className?: string;\n  eventStats: IncidentStats['eventStats'];\n  error?: React.ReactNode;\n};\n\nconst Sparklines = React.lazy(\n  () => import(/* webpackChunkName: \"Sparklines\" */ 'app/components/sparklines')\n);\nconst SparklinesLine = React.lazy(\n  () => import(/* webpackChunkName: \"SparklinesLine\" */ 'app/components/sparklines/line')\n);\n\nclass SparkLine extends React.Component<Props> {\n  render() {\n    const {className, error, eventStats} = this.props;\n\n    if (error) {\n      return <SparklineError error={error} />;\n    }\n\n    if (!eventStats) {\n      return <SparkLinePlaceholder />;\n    }\n\n    const data = eventStats.data.map(([, value]) =>\n      value && Array.isArray(value) && value.length ? value[0].count || 0 : 0\n    );\n\n    return (\n      <React.Suspense fallback={<SparkLinePlaceholder />}>\n        <div data-test-id=\"incident-sparkline\" className={className}>\n          <Sparklines data={data} width={100} height={32}>\n            <SparklinesLine\n              style={{stroke: theme.gray300, fill: 'none', strokeWidth: 2}}\n            />\n          </Sparklines>\n        </div>\n      </React.Suspense>\n    );\n  }\n}\n\nconst StyledSparkLine = styled(SparkLine)`\n  flex-shrink: 0;\n  width: 100%;\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparkLinePlaceholder = styled(Placeholder)`\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparklineError = styled(SparkLinePlaceholder)`\n  align-items: center;\n  line-height: 1;\n`;\n\nexport default StyledSparkLine;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport theme from 'app/utils/theme';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {AlertRuleStatus, Incident, IncidentStats, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset, isIssueAlert} from '../utils';\n\nimport SparkLine from './sparkLine';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {start: string; end: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  filteredStatus: 'open' | 'closed';\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  stats: IncidentStats;\n} & AsyncComponent['state'];\n\nclass AlertListRow extends AsyncComponent<Props, State> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, incident, filteredStatus} = this.props;\n\n    if (filteredStatus === 'open') {\n      return [\n        ['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`],\n      ];\n    }\n\n    return [];\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderTimeSince(date: string) {\n    return (\n      <CreatedResolvedTime>\n        <TimeSince date={date} />\n      </CreatedResolvedTime>\n    );\n  }\n\n  renderStatusIndicator() {\n    const {status} = this.props.incident;\n    const isResolved = status === IncidentStatus.CLOSED;\n    const isWarning = status === IncidentStatus.WARNING;\n\n    const color = isResolved ? theme.gray200 : isWarning ? theme.orange300 : theme.red200;\n    const text = isResolved ? t('Resolved') : isWarning ? t('Warning') : t('Critical');\n\n    return (\n      <Tooltip title={tct('Status: [text]', {text})}>\n        <StatusIndicator color={color} />\n      </Tooltip>\n    );\n  }\n\n  renderBody() {\n    const {\n      incident,\n      orgId,\n      projectsLoaded,\n      projects,\n      filteredStatus,\n      organization,\n    } = this.props;\n    const {error, stats} = this.state;\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n    const slug = incident.projects[0];\n\n    const hasRedesign =\n      !isIssueAlert(incident.alertRule) &&\n      organization.features.includes('alert-details-redesign');\n\n    const alertLink = hasRedesign\n      ? {\n          pathname: `/organizations/${orgId}/alerts/rules/details/${\n            incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n            incident.alertRule.originalAlertRuleId\n              ? incident.alertRule.originalAlertRuleId\n              : incident.alertRule.id\n          }/`,\n          query: {alert: incident.identifier},\n        }\n      : {\n          pathname: `/organizations/${orgId}/alerts/${incident.identifier}/`,\n        };\n\n    return (\n      <ErrorBoundary>\n        <IncidentPanelItem>\n          <TableLayout status={filteredStatus}>\n            <TitleAndSparkLine status={filteredStatus}>\n              <Title>\n                {this.renderStatusIndicator()}\n                <IncidentLink to={alertLink}>Alert #{incident.id}</IncidentLink>\n                {incident.title}\n              </Title>\n\n              {filteredStatus === 'open' && (\n                <SparkLine\n                  error={error && <ErrorLoadingStatsIcon />}\n                  eventStats={stats?.eventStats}\n                />\n              )}\n            </TitleAndSparkLine>\n\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n\n            {this.renderTimeSince(incident.dateStarted)}\n\n            {filteredStatus === 'closed' && (\n              <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n            )}\n\n            {filteredStatus === 'closed' &&\n              incident.dateClosed &&\n              this.renderTimeSince(incident.dateClosed)}\n          </TableLayout>\n        </IncidentPanelItem>\n      </ErrorBoundary>\n    );\n  }\n}\n\nfunction ErrorLoadingStatsIcon() {\n  return (\n    <Tooltip title={t('Error loading alert stats')}>\n      <IconWarning />\n    </Tooltip>\n  );\n}\n\nconst CreatedResolvedTime = styled('div')`\n  ${overflowEllipsis}\n  line-height: 1.4;\n  display: flex;\n  align-items: center;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StatusIndicator = styled('div')<{color: string}>`\n  width: 10px;\n  height: 12px;\n  background: ${p => p.color};\n  display: inline-block;\n  border-top-right-radius: 40%;\n  border-bottom-right-radius: 40%;\n  margin-bottom: -1px;\n`;\n\nconst Title = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst IncidentLink = styled(Link)`\n  padding: 0 ${space(1)};\n`;\n\nconst IncidentPanelItem = styled(PanelItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default AlertListRow;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst TableLayout = styled('div')<{status: 'open' | 'closed'}>`\n  display: grid;\n  grid-template-columns: ${p =>\n    p.status === 'open' ? '4fr 1fr 2fr' : '3fr 2fr 2fr 1fr 2fr'};\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst TitleAndSparkLine = styled('div')<{status: 'open' | 'closed'}>`\n  display: ${p => (p.status === 'open' ? 'grid' : 'flex')};\n  grid-gap: ${space(1)};\n  grid-template-columns: auto 120px;\n  align-items: center;\n  padding-right: ${space(2)};\n  overflow: hidden;\n`;\n\nexport {TableLayout, TitleAndSparkLine};\n","import {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {TimePeriod, TimeWindow} from 'app/views/settings/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const ALERT_RULE_DETAILS_DEFAULT_PERIOD = TimePeriod.ONE_DAY;\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  start: string;\n  end: string;\n  period: string;\n  label: string;\n  custom?: boolean;\n};\n","import styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport space from 'app/styles/space';\n\nimport {DisplayModes} from './charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  display?: DisplayModes;\n  trendFunction?: string;\n  trendColumn?: string;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n    },\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","module.exports = __webpack_public_path__ + \"spot/alerts-empty-state.4d03bc.svg\";"],"sourceRoot":""}