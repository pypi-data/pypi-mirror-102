{"version":3,"sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/utils/discover/traceHoverCard.tsx","webpack:///./app/components/events/eventTags/eventTagsPillValue.tsx","webpack:///./app/components/events/eventTags/eventTagsPill.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/repoLabel.tsx","webpack:///./app/components/versionHoverCard.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/utils/createFuzzySearch.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx"],"names":["Reflux","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","loadDeviceListModule","DeviceName","props","state","this","_isMounted","then","setState","value","children","deviceName","data-test-id","React","TraceHoverCard","traceId","HeaderWrapper","t","TraceWrapper","StyledTrace","version","truncate","anchor","ClipboardIconWrapper","size","tableData","isLoading","error","LoadingWrapper","mini","numOfTransactions","numOfErrors","data","row","count","CardBodyWrapper","EventCountWrapper","className","toLocaleString","location","api","orgSlug","numTransactionsEventView","EventView","id","name","fields","query","projects","to","orderby","getResultsViewUrlTarget","eventView","referrer","header","renderHeader","body","renderBody","Version","space","withApi","tag","key","meta","isRelease","streamPath","locationSearch","content","String","tooltipRawVersion","defined","err","length","pathname","search","iconStyle","EventTagsPill","organization","projectId","releasesPath","hasQueryFeature","queryString","isTrace","getMeta","type","isUrl","href","css","projectSlug","releaseVersion","Link","containerClassName","slug","SearchBar","defaultQuery","dropdownVisible","searchInputRef","current","blur","evt","preventDefault","onSearch","callIfFunction","onChange","target","nextProps","width","classNames","onSubmit","StyledInput","placeholder","ref","autoComplete","onBlur","onQueryBlur","onQueryChange","StyledIconSearch","color","SearchClearButton","priority","onClick","clearSearch","icon","label","Input","p","IconSearch","Button","theme","fontSizeLarge","gray200","gray300","unknownUser","username","email","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","message","firstLine","truncated","substr","words","pop","commit","headerClass","commitAuthor","author","user","renderMessage","date","dateCreated","white","overflowEllipsis","fontSizeSmall","VersionHoverCard","visible","ConnectRepo","release","deploys","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","slice","VersionWrapper","StyledVersion","newGroups","style","textAlign","commitCount","authors","users","avatarSize","tooltipOptions","container","typeMembers","map","env","idx","position","VersionRepoLabel","StyledTimeSince","deploysLoading","deploysError","releaseLoading","releaseError","repositories","repositoriesLoading","repositoriesError","loading","hasRepos","renderObj","getBody","getRepoLink","WrappedComponent","withRepositories","createReactClass","displayName","getDisplayName","mixins","ReleaseStore","getInitialState","componentDidMount","fetchRelease","fetchDeploys","releaseData","getProjectRelease","getReleaseDeploys","onStoreUpdate","render","RepoLabel","TimeSince","loadFuzzySearch","createFuzzySearch","objects","options","Error","Fuse","opts","DEFAULT_FUSE_OPTIONS","RepositoryStoreConfig","listenables","RepoActions","init","resetRepositories","trigger","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","get","INITIAL_STATE","RepositoryStore","repoData","RepositoryActions","fetchRepositories","params","path","requestPromise","method","res","Sentry","scope","setLevel","setFingerprint","getRepositories"],"mappings":"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","file":"app_components_events_eventTags_eventTagsPill_tsx-app_components_searchBar_tsx-app_utils_crea-1e1362.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor} from 'history';\n\nimport {Client} from 'app/api';\nimport Clipboard from 'app/components/clipboard';\nimport Hovercard from 'app/components/hovercard';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Version from 'app/components/version';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\nimport DiscoverQuery, {TableData} from './discoverQuery';\nimport EventView from './eventView';\n\ntype ChildrenProps = {to: LocationDescriptor};\n\ntype Props = {\n  api: Client;\n\n  orgSlug: Organization['slug'];\n  traceId: string;\n\n  location: Location;\n\n  children: (props: ChildrenProps) => React.ReactNode;\n\n  // hover card props\n  containerClassName: string;\n};\n\nclass TraceHoverCard extends React.Component<Props> {\n  renderHeader() {\n    const {traceId} = this.props;\n\n    return (\n      <HeaderWrapper>\n        <span>{t('Trace')}</span>\n        <TraceWrapper>\n          <StyledTrace version={traceId} truncate anchor={false} />\n          <Clipboard value={traceId}>\n            <ClipboardIconWrapper>\n              <IconCopy size=\"xs\" />\n            </ClipboardIconWrapper>\n          </Clipboard>\n        </TraceWrapper>\n      </HeaderWrapper>\n    );\n  }\n\n  renderBody({\n    tableData,\n    isLoading,\n    error,\n  }: {\n    tableData: TableData | null;\n    isLoading: boolean;\n    error: null | string;\n  }) {\n    if (isLoading) {\n      return (\n        <LoadingWrapper>\n          <LoadingIndicator mini />\n        </LoadingWrapper>\n      );\n    }\n\n    if (error) {\n      return <LoadingError />;\n    }\n\n    if (!tableData) {\n      return null;\n    }\n\n    let numOfTransactions = 0;\n    let numOfErrors = 0;\n    // aggregate transaction and error (default, csp, error) counts\n    for (const row of tableData.data) {\n      if (row['event.type'] === 'transaction') {\n        numOfTransactions = (row.count as number) ?? 0;\n      } else {\n        numOfErrors += (row.count as number) ?? 0;\n      }\n    }\n\n    return (\n      <CardBodyWrapper>\n        <EventCountWrapper>\n          <h6>{t('Transactions')}</h6>\n          <div className=\"count-since\">{numOfTransactions.toLocaleString()}</div>\n        </EventCountWrapper>\n        <EventCountWrapper>\n          <h6>{t('Errors')}</h6>\n          <div className=\"count-since\">{numOfErrors.toLocaleString()}</div>\n        </EventCountWrapper>\n      </CardBodyWrapper>\n    );\n  }\n\n  render() {\n    const {traceId, location, api, orgSlug} = this.props;\n\n    // used to fetch number of transactions to display in hovercard\n    const numTransactionsEventView = EventView.fromNewQueryWithLocation(\n      {\n        id: undefined,\n        name: `Transactions with Trace ID ${traceId}`,\n        fields: ['event.type', 'count()'],\n        query: `trace:${traceId}`,\n        projects: [],\n        version: 2,\n      },\n      location\n    );\n\n    // used to create link to discover page with relevant query\n    const traceEventView = EventView.fromNewQueryWithLocation(\n      {\n        id: undefined,\n        name: `Events with Trace ID ${traceId}`,\n        fields: ['transaction', 'project', 'trace.span', 'event.type', 'timestamp'],\n        orderby: '-timestamp',\n        query: `trace:${traceId}`,\n        projects: [],\n        version: 2,\n      },\n      location\n    );\n\n    const to = traceEventView.getResultsViewUrlTarget(orgSlug);\n\n    return (\n      <DiscoverQuery\n        api={api}\n        location={location}\n        eventView={numTransactionsEventView}\n        orgSlug={orgSlug}\n        referrer=\"api.trace-view.hover-card\"\n      >\n        {({isLoading, error, tableData}) => {\n          return (\n            <Hovercard\n              {...this.props}\n              header={this.renderHeader()}\n              body={this.renderBody({isLoading, error, tableData})}\n            >\n              {this.props.children({to})}\n            </Hovercard>\n          );\n        }}\n      </DiscoverQuery>\n    );\n  }\n}\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst TraceWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst StyledTrace = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\n\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst LoadingWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CardBodyWrapper = styled('div')`\n  display: flex;\n`;\n\nconst EventCountWrapper = styled('div')`\n  flex: 1;\n`;\n\nexport default withApi(TraceHoverCard);\n","import React from 'react';\n\nimport DeviceName from 'app/components/deviceName';\nimport AnnotatedText from 'app/components/events/meta/annotatedText';\nimport Link from 'app/components/links/link';\nimport Version from 'app/components/version';\nimport {Meta} from 'app/types';\nimport {EventTag} from 'app/types/event';\nimport {defined} from 'app/utils';\n\ntype Props = {\n  isRelease: boolean;\n  streamPath: string;\n  locationSearch: string;\n  tag: EventTag;\n  meta?: Meta;\n};\n\nconst EventTagsPillValue = ({\n  tag: {key, value},\n  meta,\n  isRelease,\n  streamPath,\n  locationSearch,\n}: Props) => {\n  const getContent = () =>\n    isRelease ? (\n      <Version version={String(value)} anchor={false} tooltipRawVersion truncate />\n    ) : (\n      <AnnotatedText\n        value={defined(value) && <DeviceName value={String(value)} />}\n        meta={meta}\n      />\n    );\n\n  const content = getContent();\n\n  if (!meta?.err?.length && defined(key)) {\n    return <Link to={{pathname: streamPath, search: locationSearch}}>{content}</Link>;\n  }\n\n  return content;\n};\n\nexport default EventTagsPillValue;\n","import React from 'react';\nimport {Link} from 'react-router';\nimport {css} from '@emotion/core';\nimport {Location, Query} from 'history';\nimport * as queryString from 'query-string';\n\nimport AnnotatedText from 'app/components/events/meta/annotatedText';\nimport {getMeta} from 'app/components/events/meta/metaProxy';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Pill from 'app/components/pill';\nimport VersionHoverCard from 'app/components/versionHoverCard';\nimport {IconInfo, IconOpen} from 'app/icons';\nimport {Organization} from 'app/types';\nimport {EventTag} from 'app/types/event';\nimport {isUrl} from 'app/utils';\nimport TraceHoverCard from 'app/utils/discover/traceHoverCard';\n\nimport EventTagsPillValue from './eventTagsPillValue';\n\nconst iconStyle = css`\n  position: relative;\n  top: 1px;\n`;\n\ntype Props = {\n  tag: EventTag;\n  streamPath: string;\n  releasesPath: string;\n  query: Query;\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  hasQueryFeature: boolean;\n};\n\nconst EventTagsPill = ({\n  tag,\n  query,\n  organization,\n  projectId,\n  streamPath,\n  releasesPath,\n  location,\n  hasQueryFeature,\n}: Props) => {\n  const locationSearch = `?${queryString.stringify(query)}`;\n  const {key, value} = tag;\n  const isRelease = key === 'release';\n  const isTrace = key === 'trace';\n  const name = !key ? <AnnotatedText value={key} meta={getMeta(tag, 'key')} /> : key;\n  const type = !key ? 'error' : undefined;\n\n  return (\n    <Pill name={name} value={value} type={type}>\n      <EventTagsPillValue\n        tag={tag}\n        meta={getMeta(tag, 'value')}\n        streamPath={streamPath}\n        locationSearch={locationSearch}\n        isRelease={isRelease}\n      />\n      {isUrl(value) && (\n        <ExternalLink href={value} className=\"external-icon\">\n          <IconOpen size=\"xs\" css={iconStyle} />\n        </ExternalLink>\n      )}\n      {isRelease && (\n        <div className=\"pill-icon\">\n          <VersionHoverCard\n            organization={organization}\n            projectSlug={projectId}\n            releaseVersion={value}\n          >\n            <Link to={{pathname: `${releasesPath}${value}/`, search: locationSearch}}>\n              <IconInfo size=\"xs\" css={iconStyle} />\n            </Link>\n          </VersionHoverCard>\n        </div>\n      )}\n      {isTrace && hasQueryFeature && (\n        <TraceHoverCard\n          containerClassName=\"pill-icon\"\n          traceId={value}\n          orgSlug={organization.slug}\n          location={location}\n        >\n          {({to}) => {\n            return (\n              <Link to={to}>\n                <IconOpen size=\"xs\" css={iconStyle} />\n              </Link>\n            );\n          }}\n        </TraceHoverCard>\n      )}\n    </Pill>\n  );\n};\n\nexport default EventTagsPill;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport Button from 'app/components/button';\nimport {IconSearch} from 'app/icons';\nimport {IconClose} from 'app/icons/iconClose';\nimport {t} from 'app/locale';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\ntype DefaultProps = {\n  query: string;\n  defaultQuery: string;\n  onSearch: (query: string) => void;\n};\n\ntype Props = DefaultProps & {\n  placeholder?: string;\n  className?: string;\n  onChange?: (query: string) => void;\n  width?: string;\n};\n\ntype State = {\n  query: string;\n  dropdownVisible: boolean;\n};\n\nclass SearchBar extends React.PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    query: '',\n    defaultQuery: '',\n    onSearch: function () {},\n  };\n\n  state = {\n    query: this.props.query || this.props.defaultQuery,\n    dropdownVisible: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({\n        query: nextProps.query,\n      });\n    }\n  }\n\n  searchInputRef = React.createRef<HTMLInputElement>();\n\n  blur = () => {\n    if (this.searchInputRef.current) {\n      this.searchInputRef.current.blur();\n    }\n  };\n\n  onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    this.blur();\n    this.props.onSearch(this.state.query);\n  };\n\n  clearSearch = () => {\n    this.setState({query: this.props.defaultQuery}, () => {\n      this.props.onSearch(this.state.query);\n      callIfFunction(this.props.onChange, this.state.query);\n    });\n  };\n\n  onQueryFocus = () => {\n    this.setState({\n      dropdownVisible: true,\n    });\n  };\n\n  onQueryBlur = () => {\n    this.setState({dropdownVisible: false});\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {value} = evt.target;\n\n    this.setState({query: value});\n    callIfFunction(this.props.onChange, value);\n  };\n\n  render() {\n    const {className, width} = this.props;\n\n    return (\n      <div className={classNames('search', className)}>\n        <form className=\"form-horizontal\" onSubmit={this.onSubmit}>\n          <div>\n            <StyledInput\n              type=\"text\"\n              className=\"search-input\"\n              placeholder={this.props.placeholder}\n              name=\"query\"\n              ref={this.searchInputRef}\n              autoComplete=\"off\"\n              value={this.state.query}\n              onBlur={this.onQueryBlur}\n              onChange={this.onQueryChange}\n              width={width}\n            />\n            <StyledIconSearch className=\"search-input-icon\" size=\"sm\" color=\"gray300\" />\n            {this.state.query !== this.props.defaultQuery && (\n              <SearchClearButton\n                type=\"button\"\n                className=\"search-clear-form\"\n                priority=\"link\"\n                onClick={this.clearSearch}\n                size=\"xsmall\"\n                icon={<IconClose />}\n                label={t('Clear')}\n              />\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst StyledInput = styled(Input)`\n  width: ${p => (p.width ? p.width : undefined)};\n  &.focus-visible {\n    box-shadow: inset 0 2px 0 rgba(0, 0, 0, 0.04), 0 0 6px rgba(177, 171, 225, 0.3);\n    border-color: #a598b2;\n    outline: none;\n  }\n`;\n\nconst StyledIconSearch = styled(IconSearch)`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 14px;\n`;\n\nconst SearchClearButton = styled(Button)`\n  position: absolute;\n  top: 50%;\n  height: 16px;\n  transform: translateY(-50%);\n  right: 10px;\n  font-size: ${p => p.theme.fontSizeLarge};\n  color: ${p => p.theme.gray200};\n\n  &:hover {\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nexport default SearchBar;\n","import React from 'react';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\nimport {AvatarUser, Commit} from 'app/types';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nclass LastCommit extends React.Component<Props> {\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have elipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return truncated + '...';\n    }\n    return firstLine;\n  }\n\n  render() {\n    const {commit, headerClass} = this.props;\n    const commitAuthor = commit && commit.author;\n    return (\n      <div>\n        <h6 className={headerClass}>Last commit</h6>\n        <div className=\"commit\">\n          <div className=\"commit-avatar\">\n            <UserAvatar user={commitAuthor || unknownUser} />\n          </div>\n          <div className=\"commit-message truncate\">\n            {this.renderMessage(commit.message)}\n          </div>\n          <div className=\"commit-meta\">\n            <strong>{(commitAuthor && commitAuthor.name) || t('Unknown Author')}</strong>\n            &nbsp;\n            <TimeSince date={commit.dateCreated} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LastCommit;\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray200};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport AvatarList from 'app/components/avatar/avatarList';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Hovercard from 'app/components/hovercard';\nimport LastCommit from 'app/components/lastCommit';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport RepoLabel from 'app/components/repoLabel';\nimport TimeSince from 'app/components/timeSince';\nimport Version from 'app/components/version';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Deploy, Organization, Release, Repository} from 'app/types';\nimport {defined} from 'app/utils';\nimport withApi from 'app/utils/withApi';\nimport withRelease from 'app/utils/withRelease';\nimport withRepositories from 'app/utils/withRepositories';\n\ntype Props = {\n  api: Client;\n  projectSlug: string;\n  releaseVersion: string;\n\n  organization: Organization;\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n  repositories?: Array<Repository>;\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends React.Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {organization} = this.props;\n    const orgSlug = organization.slug;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || !defined(deploys)) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: (\n        <HeaderWrapper>\n          {t('Release')}\n          <VersionWrapper>\n            <StyledVersion version={releaseVersion} truncate anchor={false} />\n\n            <Clipboard value={releaseVersion}>\n              <ClipboardIconWrapper>\n                <IconCopy size=\"xs\" />\n              </ClipboardIconWrapper>\n            </Clipboard>\n          </VersionWrapper>\n        </HeaderWrapper>\n      ),\n      body: (\n        <div>\n          <div className=\"row row-flex\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <div className=\"count-since\">{release.newGroups}</div>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <LastCommit commit={lastCommit} headerClass=\"commit-heading\" />}\n          {deploys.length > 0 && (\n            <div>\n              <div className=\"divider\">\n                <h6 className=\"deploy-heading\">{t('Deploys')}</h6>\n              </div>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <div className=\"deploy\" key={idx}>\n                    <div className=\"deploy-meta\" style={{position: 'relative'}}>\n                      <VersionRepoLabel>{env}</VersionRepoLabel>\n                      {dateFinished && <StyledTimeSince date={dateFinished} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 98px;\n  width: 50%;\n  padding: 3px 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getProjectRelease, getReleaseDeploys} from 'app/actionCreators/release';\nimport {Client} from 'app/api';\nimport ReleaseStore from 'app/stores/releaseStore';\nimport {Deploy, Organization, Release} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n};\n\nconst withRelease = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRelease(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(ReleaseStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {projectSlug, releaseVersion} = this.props as P & DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      return {...releaseData};\n    },\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    },\n\n    fetchRelease() {\n      const {api, organization, projectSlug, releaseVersion} = this.props as P &\n        DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    },\n\n    fetchDeploys() {\n      const {api, organization, projectSlug, releaseVersion} = this.props as P &\n        DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    },\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props as P & DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    },\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    },\n  });\n\nexport default withRelease;\n","import {DEFAULT_FUSE_OPTIONS} from 'app/constants';\n\nexport function loadFuzzySearch() {\n  return import(/* webpackChunkName: \"Fuse\" */ 'fuse.js');\n}\n\nexport async function createFuzzySearch<\n  T = string,\n  Options extends Fuse.FuseOptions<T> = Fuse.FuseOptions<T>\n>(objects: any[], options: Options): Promise<Fuse<T, Options>> {\n  if (!options.keys) {\n    throw new Error('You need to define `options.keys`');\n  }\n\n  const {default: Fuse} = await loadFuzzySearch();\n  const opts = {\n    ...DEFAULT_FUSE_OPTIONS,\n    ...options,\n  };\n  return new Fuse(objects, opts);\n}\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n"],"sourceRoot":""}