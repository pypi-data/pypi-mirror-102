{"version":3,"sources":["webpack:///./app/actionCreators/projects.tsx","webpack:///./app/components/forms/form.tsx","webpack:///./app/components/forms/formField.tsx","webpack:///./app/components/forms/selectField.tsx","webpack:///./app/stores/memberListStore.tsx","webpack:///./app/stores/projectsStatsStore.tsx","webpack:///../node_modules/lodash/chunk.js"],"names":["update","api","params","ProjectActions","projectId","data","endpoint","orgId","requestPromise","method","then","err","loadStats","request","query","success","error","_projectStatsToFetch","Set","_debouncedLoadStats","debounce","projectSet","storedProjects","ProjectsStatsStore","existingProjectStats","Object","values","map","id","projects","Array","from","filter","project","includes","length","queries","chunk","chunkedProjects","additionalQuery","idQueryParams","join","statsPeriod","_queryForStats","Promise","all","results","reduce","acc","result","concat","addErrorMessage","t","clear","loadStatsForProject","add","setActiveProject","removeProject","slug","addSuccessMessage","tct","transferProject","email","addTeamToProject","orgSlug","projectSlug","team","addLoadingMessage","removeTeamFromProject","teamSlug","changeProjectSlug","prev","next","createProject","name","platform","options","default_rules","defaultRules","loadDocs","fetchProjectsCount","fetchAnyReleaseExistence","per_page","Form","props","context","e","preventDefault","onSubmit","Error","state","onSubmitSuccess","onSubmitError","setState","FormState","errors","initialData","responseJSON","resetOnError","value","this","form","onFieldChange","isSaving","errorMessage","hideErrors","hasChanges","requireChanges","keys","isEqual","isError","nonFieldErrors","non_field_errors","StyledForm","className","i","key","children","footerClass","style","marginTop","disabled","submitDisabled","type","submitLabel","onCancel","onClick","marginLeft","cancelLabel","extraButton","React","PropTypes","FormField","target","setValue","finalValue","coerceValue","onChange","getValue","nextProps","nextContext","newError","getError","defined","newValue","hasOwnProperty","defaultValue","required","classNames","getClassName","disabledReason","title","position","size","label","hideErrorMessage","help","cx","getFinalClassNames","shouldShowErrorMessage","htmlFor","getId","getField","renderDisabledReason","ErrorMessage","p","theme","fontSizeMedium","red300","SelectField","opt","coercedValue","isMultiple","v","multi","multiple","clearable","creatable","choices","placeholder","isLoading","deprecatedSelectControl","StyledSelectControl","SelectControl","Reflux","loaded","init","loadInitialData","items","trigger","isLoaded","getById","getByEmail","toLowerCase","getAll","projectsStatsStore","itemsBySlug","reset","listenTo","onStatsLoadSuccess","onUpdate","onUpdateError","getInitialState","updatingItems","Map","forEach","getBySlug","set","newProject","onUpdateSuccess","_err","get","baseSlice","isIterateeCall","toInteger","nativeCeil","Math","ceil","nativeMax","max","module","exports","array","guard","undefined","index","resIndex"],"mappings":"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","file":"app_actionCreators_projects_tsx-app_components_forms_selectField_tsx-app_stores_memberListStore_tsx.js","sourcesContent":["import {Query} from 'history';\nimport chunk from 'lodash/chunk';\nimport debounce from 'lodash/debounce';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport {PlatformKey} from 'app/data/platformCategories';\nimport {t, tct} from 'app/locale';\nimport ProjectsStatsStore from 'app/stores/projectsStatsStore';\nimport {Project, Team} from 'app/types';\n\ntype UpdateParams = {\n  orgId: string;\n  projectId: string;\n  data?: {[key: string]: any};\n  query?: Query;\n};\n\nexport function update(api: Client, params: UpdateParams) {\n  ProjectActions.update(params.projectId, params.data);\n\n  const endpoint = `/projects/${params.orgId}/${params.projectId}/`;\n  return api\n    .requestPromise(endpoint, {\n      method: 'PUT',\n      data: params.data,\n    })\n    .then(\n      data => {\n        ProjectActions.updateSuccess(data);\n        return data;\n      },\n      err => {\n        ProjectActions.updateError(err, params.projectId);\n        throw err;\n      }\n    );\n}\n\ntype StatsParams = Pick<UpdateParams, 'orgId' | 'data' | 'query'>;\n\nexport function loadStats(api: Client, params: StatsParams) {\n  ProjectActions.loadStats(params.orgId, params.data);\n\n  const endpoint = `/organizations/${params.orgId}/stats/`;\n  api.request(endpoint, {\n    query: params.query,\n    success: data => {\n      ProjectActions.loadStatsSuccess(data);\n    },\n    error: data => {\n      ProjectActions.loadStatsError(data);\n    },\n  });\n}\n\n// This is going to queue up a list of project ids we need to fetch stats for\n// Will be cleared when debounced function fires\nconst _projectStatsToFetch: Set<string> = new Set();\n\n// Max projects to query at a time, otherwise if we fetch too many in the same request\n// it can timeout\nconst MAX_PROJECTS_TO_FETCH = 10;\n\nconst _queryForStats = (\n  api: Client,\n  projects: string[],\n  orgId: string,\n  additionalQuery: Query | undefined\n) => {\n  const idQueryParams = projects.map(project => `id:${project}`).join(' ');\n  const endpoint = `/organizations/${orgId}/projects/`;\n\n  const query: Query = {\n    statsPeriod: '24h',\n    query: idQueryParams,\n    ...additionalQuery,\n  };\n\n  return api.requestPromise(endpoint, {\n    query,\n  });\n};\n\nexport const _debouncedLoadStats = debounce(\n  (api: Client, projectSet: Set<string>, params: UpdateParams) => {\n    const storedProjects: {[key: string]: Project} = ProjectsStatsStore.getAll();\n    const existingProjectStats = Object.values(storedProjects).map(({id}) => id);\n    const projects = Array.from(projectSet).filter(\n      project => !existingProjectStats.includes(project)\n    );\n\n    if (!projects.length) {\n      _projectStatsToFetch.clear();\n      return;\n    }\n\n    // Split projects into more manageable chunks to query, otherwise we can\n    // potentially face server timeouts\n    const queries = chunk(projects, MAX_PROJECTS_TO_FETCH).map(chunkedProjects =>\n      _queryForStats(api, chunkedProjects, params.orgId, params.query)\n    );\n\n    Promise.all(queries)\n      .then(results => {\n        ProjectActions.loadStatsForProjectSuccess(\n          results.reduce((acc, result) => acc.concat(result), [])\n        );\n      })\n      .catch(() => {\n        addErrorMessage(t('Unable to fetch all project stats'));\n      });\n\n    // Reset projects list\n    _projectStatsToFetch.clear();\n  },\n  50\n);\n\nexport function loadStatsForProject(api: Client, project: string, params: UpdateParams) {\n  // Queue up a list of projects that we need stats for\n  // and call a debounced function to fetch stats for list of projects\n  _projectStatsToFetch.add(project);\n  _debouncedLoadStats(api, _projectStatsToFetch, params);\n}\n\nexport function setActiveProject(project: Project | null) {\n  ProjectActions.setActive(project);\n}\n\nexport function removeProject(api: Client, orgId: string, project: Project) {\n  const endpoint = `/projects/${orgId}/${project.slug}/`;\n\n  ProjectActions.removeProject(project);\n  return api\n    .requestPromise(endpoint, {\n      method: 'DELETE',\n    })\n    .then(\n      () => {\n        ProjectActions.removeProjectSuccess(project);\n        addSuccessMessage(\n          tct('[project] was successfully removed', {project: project.slug})\n        );\n      },\n      err => {\n        ProjectActions.removeProjectError(project);\n        addErrorMessage(tct('Error removing [project]', {project: project.slug}));\n        throw err;\n      }\n    );\n}\n\nexport function transferProject(\n  api: Client,\n  orgId: string,\n  project: Project,\n  email: string\n) {\n  const endpoint = `/projects/${orgId}/${project.slug}/transfer/`;\n\n  return api\n    .requestPromise(endpoint, {\n      method: 'POST',\n      data: {\n        email,\n      },\n    })\n    .then(\n      () => {\n        addSuccessMessage(\n          tct('A request was sent to move [project] to a different organization', {\n            project: project.slug,\n          })\n        );\n      },\n      err => {\n        addErrorMessage(tct('Error transferring [project]', {project: project.slug}));\n        throw err;\n      }\n    );\n}\n\n/**\n * Associate a team with a project\n */\n\n/**\n *  Adds a team to a project\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n * @param team Team data object\n */\nexport function addTeamToProject(\n  api: Client,\n  orgSlug: string,\n  projectSlug: string,\n  team: Team\n) {\n  const endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${team.slug}/`;\n\n  addLoadingMessage();\n  ProjectActions.addTeam(team);\n\n  return api\n    .requestPromise(endpoint, {\n      method: 'POST',\n    })\n    .then(\n      project => {\n        addSuccessMessage(\n          tct('[team] has been added to the [project] project', {\n            team: `#${team.slug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.addTeamSuccess(team, projectSlug);\n        ProjectActions.updateSuccess(project);\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to add [team] to the [project] project', {\n            team: `#${team.slug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.addTeamError();\n        throw err;\n      }\n    );\n}\n\n/**\n * Removes a team from a project\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n * @param teamSlug Team Slug\n */\nexport function removeTeamFromProject(\n  api: Client,\n  orgSlug: string,\n  projectSlug: string,\n  teamSlug: string\n) {\n  const endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${teamSlug}/`;\n\n  addLoadingMessage();\n  ProjectActions.removeTeam(teamSlug);\n\n  return api\n    .requestPromise(endpoint, {\n      method: 'DELETE',\n    })\n    .then(\n      project => {\n        addSuccessMessage(\n          tct('[team] has been removed from the [project] project', {\n            team: `#${teamSlug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.removeTeamSuccess(teamSlug, projectSlug);\n        ProjectActions.updateSuccess(project);\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to remove [team] from the [project] project', {\n            team: `#${teamSlug}`,\n            project: projectSlug,\n          })\n        );\n        ProjectActions.removeTeamError(err);\n        throw err;\n      }\n    );\n}\n\n/**\n * Change a project's slug\n *\n * @param prev Previous slug\n * @param next New slug\n */\nexport function changeProjectSlug(prev: string, next: string) {\n  ProjectActions.changeSlug(prev, next);\n}\n\n/**\n * Send a sample event\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n */\nexport function sendSampleEvent(api: Client, orgSlug: string, projectSlug: string) {\n  const endpoint = `/projects/${orgSlug}/${projectSlug}/create-sample/`;\n\n  return api.requestPromise(endpoint, {\n    method: 'POST',\n  });\n}\n\n/**\n * Creates a project\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param team The team slug to assign the project to\n * @param name Name of the project\n * @param platform The platform key of the project\n * @param options Additional options such as creating default alert rules\n */\nexport function createProject(\n  api: Client,\n  orgSlug: string,\n  team: string,\n  name: string,\n  platform: string,\n  options: {defaultRules?: boolean} = {}\n) {\n  return api.requestPromise(`/teams/${orgSlug}/${team}/projects/`, {\n    method: 'POST',\n    data: {name, platform, default_rules: options.defaultRules},\n  });\n}\n\n/**\n * Load platform documentation specific to the project. The DSN and various\n * other project specific secrets will be included in the documentation.\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectSlug Project Slug\n * @param platform Project platform.\n */\nexport function loadDocs(\n  api: Client,\n  orgSlug: string,\n  projectSlug: string,\n  platform: PlatformKey\n) {\n  return api.requestPromise(`/projects/${orgSlug}/${projectSlug}/docs/${platform}/`);\n}\n\n/**\n * Load the counts of my projects and all projects for the current user\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n */\nexport function fetchProjectsCount(api: Client, orgSlug: string) {\n  return api.requestPromise(`/organizations/${orgSlug}/projects-count/`);\n}\n\n/**\n * Check if there are any releases in the last 90 days.\n * Used for checking if project is using releases.\n *\n * @param api API Client\n * @param orgSlug Organization Slug\n * @param projectId Project Id\n */\nexport async function fetchAnyReleaseExistence(\n  api: Client,\n  orgSlug: string,\n  projectId: number | string\n) {\n  const data = await api.requestPromise(`/organizations/${orgSlug}/releases/stats/`, {\n    method: 'GET',\n    query: {\n      statsPeriod: '90d',\n      project: projectId,\n      per_page: 1,\n    },\n  });\n\n  return data.length > 0;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\n\nimport FormState from 'app/components/forms/state';\nimport {t} from 'app/locale';\n\ntype FormProps = {\n  cancelLabel?: string;\n  onCancel?: () => void;\n  onSubmit?: (\n    data: object,\n    onSubmitSuccess: (data: object) => void,\n    onSubmitError: (error: object) => void\n  ) => void;\n  initialData?: object;\n  onSubmitSuccess?: (data: object) => void;\n  onSubmitError?: (error: object) => void;\n  resetOnError?: boolean;\n  requireChanges?: boolean;\n  errorMessage?: React.ReactNode;\n  hideErrors?: boolean;\n  className?: string;\n  footerClass?: string;\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  extraButton?: React.ReactNode;\n};\n\ntype FormClassState = {\n  data: any;\n  errors: {non_field_errors?: object[]} & object;\n  initialData: object;\n  state: FormState;\n};\n\nexport type Context = {\n  form: {\n    errors: object;\n    data: object;\n    onFieldChange: (name: string, value: string | number) => void;\n  };\n};\n\nclass Form<\n  Props extends FormProps = FormProps,\n  State extends FormClassState = FormClassState\n> extends React.Component<Props, State> {\n  static childContextTypes = {\n    form: PropTypes.object.isRequired,\n  };\n\n  static defaultProps = {\n    cancelLabel: t('Cancel'),\n    submitLabel: t('Save Changes'),\n    submitDisabled: false,\n    footerClass: 'form-actions align-right',\n    className: 'form-stacked',\n    requireChanges: false,\n    hideErrors: false,\n    resetOnError: false,\n    errorMessage: t(\n      'Unable to save your changes. Please ensure all fields are valid and try again.'\n    ),\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    this.state = {\n      data: {...this.props.initialData},\n      errors: {},\n      initialData: {...this.props.initialData},\n      state: FormState.READY,\n    } as State;\n  }\n\n  getChildContext() {\n    const {data, errors} = this.state;\n    return {\n      form: {\n        data,\n        errors,\n        onFieldChange: this.onFieldChange,\n      },\n    };\n  }\n\n  onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!this.props.onSubmit) {\n      throw new Error('onSubmit is a required prop');\n    }\n    this.props.onSubmit(this.state.data, this.onSubmitSuccess, this.onSubmitError);\n  };\n\n  onSubmitSuccess = (data: object) => {\n    this.setState({\n      state: FormState.READY,\n      errors: {},\n      initialData: {...this.state.data, ...(data || {})},\n    });\n    this.props.onSubmitSuccess && this.props.onSubmitSuccess(data);\n  };\n\n  onSubmitError = error => {\n    this.setState({\n      state: FormState.ERROR,\n      errors: error.responseJSON,\n    });\n\n    if (this.props.resetOnError) {\n      this.setState({\n        initialData: {},\n      });\n    }\n\n    this.props.onSubmitError && this.props.onSubmitError(error);\n  };\n\n  onFieldChange = (name: string, value: string | number) => {\n    this.setState(state => ({\n      data: {\n        ...state.data,\n        [name]: value,\n      },\n    }));\n  };\n\n  render() {\n    const isSaving = this.state.state === FormState.SAVING;\n    const {initialData, data} = this.state;\n    const {errorMessage, hideErrors, requireChanges} = this.props;\n    const hasChanges = requireChanges\n      ? Object.keys(data).length && !isEqual(data, initialData)\n      : true;\n    const isError = this.state.state === FormState.ERROR;\n    const nonFieldErrors = this.state.errors && this.state.errors.non_field_errors;\n\n    return (\n      <StyledForm onSubmit={this.onSubmit} className={this.props.className}>\n        {isError && !hideErrors && (\n          <div className=\"alert alert-error alert-block\">\n            {nonFieldErrors ? (\n              <div>\n                <p>\n                  {t(\n                    'Unable to save your changes. Please correct the following errors try again.'\n                  )}\n                </p>\n                <ul>\n                  {nonFieldErrors.map((e, i) => (\n                    <li key={i}>{e}</li>\n                  ))}\n                </ul>\n              </div>\n            ) : (\n              errorMessage\n            )}\n          </div>\n        )}\n        {this.props.children}\n        <div className={this.props.footerClass} style={{marginTop: 25}}>\n          <button\n            className=\"btn btn-primary\"\n            disabled={isSaving || this.props.submitDisabled || !hasChanges}\n            type=\"submit\"\n          >\n            {this.props.submitLabel}\n          </button>\n          {this.props.onCancel && (\n            <button\n              type=\"button\"\n              className=\"btn btn-default\"\n              disabled={isSaving}\n              onClick={this.props.onCancel}\n              style={{marginLeft: 5}}\n            >\n              {this.props.cancelLabel}\n            </button>\n          )}\n          {this.props.extraButton}\n        </div>\n      </StyledForm>\n    );\n  }\n}\n\n// Note: this is so we can use this as a selector for SelectField\n// We need to keep `Form` as a React Component because ApiForm extends it :/\nexport const StyledForm = styled('form')``;\n\nexport default Form;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport {Context} from 'app/components/forms/form';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport {Meta} from 'app/types';\nimport {defined} from 'app/utils';\n\ntype Value = string | number | boolean;\n\ntype FormFieldProps = {\n  name: string;\n  style?: object;\n  label?: React.ReactNode;\n  defaultValue?: any;\n  disabled?: boolean;\n  disabledReason?: string;\n  help?: string | React.ReactNode;\n  required?: boolean;\n  hideErrorMessage?: boolean;\n  className?: string;\n  onChange?: (value: Value) => void;\n  error?: string;\n  value?: Value;\n  meta?: Meta;\n};\n\ntype FormFieldState = {\n  error: string | null;\n  value: Value;\n};\n\nexport default class FormField<\n  Props extends FormFieldProps = FormFieldProps,\n  State extends FormFieldState = FormFieldState\n> extends React.PureComponent<Props, State> {\n  static contextTypes = {\n    form: PropTypes.object,\n  };\n\n  static defaultProps = {\n    hideErrorMessage: false,\n    disabled: false,\n    required: false,\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    this.state = {\n      error: null,\n      value: this.getValue(props, context),\n    } as State;\n  }\n\n  componentDidMount() {}\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props, nextContext: Context) {\n    const newError = this.getError(nextProps, nextContext);\n    if (newError !== this.state.error) {\n      this.setState({error: newError});\n    }\n    if (this.props.value !== nextProps.value || defined(nextContext.form)) {\n      const newValue = this.getValue(nextProps, nextContext);\n      if (newValue !== this.state.value) {\n        this.setValue(newValue);\n      }\n    }\n  }\n\n  componentWillUnmount() {}\n\n  getValue(props: Props, context: Context) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n    if (defined(props.value)) {\n      return props.value;\n    }\n    if (form && form.data.hasOwnProperty(props.name)) {\n      return defined(form.data[props.name]) ? form.data[props.name] : '';\n    }\n    return defined(props.defaultValue) ? props.defaultValue : '';\n  }\n\n  getError(props: Props, context: Context) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n    if (defined(props.error)) {\n      return props.error;\n    }\n    return (form && form.errors[props.name]) || null;\n  }\n\n  getId() {\n    return `id-${this.props.name}`;\n  }\n\n  coerceValue(value: any) {\n    return value;\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    this.setValue(value);\n  };\n\n  setValue = (value: Value) => {\n    const form = (this.context || {}).form;\n    this.setState(\n      {\n        value,\n      },\n      () => {\n        const finalValue = this.coerceValue(this.state.value);\n        this.props.onChange && this.props.onChange(finalValue);\n        form && form.onFieldChange(this.props.name, finalValue);\n      }\n    );\n  };\n\n  getField() {\n    throw new Error('Must be implemented by child.');\n  }\n\n  getClassName(): string {\n    throw new Error('Must be implemented by child.');\n  }\n\n  getFinalClassNames() {\n    const {className, required} = this.props;\n    const {error} = this.state;\n    return classNames(className, this.getClassName(), {\n      'has-error': !!error,\n      required,\n    });\n  }\n\n  renderDisabledReason() {\n    const {disabled, disabledReason} = this.props;\n    if (!disabled) {\n      return null;\n    }\n    if (!disabledReason) {\n      return null;\n    }\n    return <QuestionTooltip title={disabledReason} position=\"top\" size=\"sm\" />;\n  }\n\n  render() {\n    const {label, hideErrorMessage, help, style} = this.props;\n    const {error} = this.state;\n    const cx = this.getFinalClassNames();\n    const shouldShowErrorMessage = error && !hideErrorMessage;\n\n    return (\n      <div style={style} className={cx}>\n        <div className=\"controls\">\n          {label && (\n            <label htmlFor={this.getId()} className=\"control-label\">\n              {label}\n            </label>\n          )}\n          {this.getField()}\n          {this.renderDisabledReason()}\n          {defined(help) && <p className=\"help-block\">{help}</p>}\n          {shouldShowErrorMessage && <ErrorMessage>{error}</ErrorMessage>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ErrorMessage = styled('p')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.red300};\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {defined} from 'app/utils';\n\nimport {StyledForm} from './form';\nimport FormField from './formField';\nimport SelectControl, {ControlProps} from './selectControl';\n\ntype SelectProps = Omit<ControlProps, 'onChange' | 'name'>;\ntype FormProps = Omit<FormField['props'], 'onChange' | 'name'>;\n\ntype Props = {\n  name: string;\n  onChange: FormField['props']['onChange'];\n  deprecatedSelectControl?: boolean;\n} & FormProps &\n  SelectProps;\n\nexport default class SelectField extends FormField<Props> {\n  static defaultProps = {\n    ...FormField.defaultProps,\n    clearable: true,\n    multiple: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n    const newError = this.getError(nextProps, nextContext);\n    if (newError !== this.state.error) {\n      this.setState({error: newError});\n    }\n    if (this.props.value !== nextProps.value || defined(nextContext.form)) {\n      const newValue = this.getValue(nextProps, nextContext);\n      // This is the only thing that is different from parent, we compare newValue against coerced value in state\n      // To remain compatible with react-select, we need to store the option object that\n      // includes `value` and `label`, but when we submit the format, we need to coerce it\n      // to just return `value`. Also when field changes, it propagates the coerced value up\n      const coercedValue = this.coerceValue(this.state.value);\n\n      // newValue can be empty string because of `getValue`, while coerceValue needs to return null (to differentiate\n      // empty string from cleared item). We could use `!=` to compare, but lets be a bit more explicit with strict equality\n      //\n      // This can happen when this is apart of a field, and it re-renders onChange for a different field,\n      // there will be a mismatch between this component's state.value and `this.getValue` result above\n      if (newValue !== coercedValue && !!newValue !== !!coercedValue) {\n        this.setValue(newValue);\n      }\n    }\n  }\n\n  // Overriding this so that we can support `multi` fields through property\n  getValue(props, context) {\n    const form = (context || this.context || {}).form;\n    props = props || this.props;\n\n    // Don't use `isMultiple` here because we're taking props from args as well\n    const defaultValue = this.isMultiple(props) ? [] : '';\n\n    if (defined(props.value)) {\n      return props.value;\n    }\n    if (form && form.data.hasOwnProperty(props.name)) {\n      return defined(form.data[props.name]) ? form.data[props.name] : defaultValue;\n    }\n    return defined(props.defaultValue) ? props.defaultValue : defaultValue;\n  }\n\n  // We need this to get react-select's `Creatable` to work properly\n  // Otherwise, when you hit \"enter\" to create a new item, the \"selected value\" does\n  // not update with new value (and also new value is not displayed in dropdown)\n  //\n  // This is also needed to get `multi` select working since we need the {label, value} object\n  // for react-select (but forms expect just the value to be propagated)\n  coerceValue(value) {\n    if (!value) {\n      return '';\n    }\n\n    if (this.isMultiple()) {\n      return value.map(v => v.value);\n    } else if (value.hasOwnProperty('value')) {\n      return value.value;\n    }\n\n    return value;\n  }\n\n  isMultiple(props?) {\n    props = props || this.props;\n    // this is to maintain compatibility with the 'multi' prop\n    return props.multi || props.multiple;\n  }\n\n  getClassName() {\n    return '';\n  }\n\n  onChange = opt => {\n    // Changing this will most likely break react-select (e.g. you won't be able to select\n    // a menu option that is from an async request, or a multi select).\n    this.setValue(opt);\n  };\n\n  getField() {\n    const {\n      options,\n      clearable,\n      creatable,\n      choices,\n      placeholder,\n      disabled,\n      required,\n      name,\n      isLoading,\n      deprecatedSelectControl,\n    } = this.props;\n\n    return (\n      <StyledSelectControl\n        deprecatedSelectControl={deprecatedSelectControl}\n        creatable={creatable}\n        id={this.getId()}\n        choices={choices}\n        options={options}\n        placeholder={placeholder}\n        disabled={disabled}\n        required={required}\n        value={this.state.value}\n        onChange={this.onChange}\n        clearable={clearable}\n        multiple={this.isMultiple()}\n        name={name}\n        isLoading={isLoading}\n      />\n    );\n  }\n}\n\n// This is to match other fields that are wrapped by a `div.control-group`\nconst StyledSelectControl = styled(SelectControl)`\n  ${StyledForm} &, .form-stacked & {\n    .control-group & {\n      margin-bottom: 0;\n    }\n\n    margin-bottom: 15px;\n  }\n`;\n","import Reflux from 'reflux';\n\nimport {User} from 'app/types';\n\ntype MemberListStoreInterface = {\n  state: User[];\n  loaded: boolean;\n  loadInitialData: (items: User[]) => void;\n  isLoaded: () => boolean;\n  getById: (id: string) => User | undefined;\n  getByEmail: (email: string) => User | undefined;\n  getAll: () => User[];\n};\n\nconst memberListStoreConfig: Reflux.StoreDefinition & MemberListStoreInterface = {\n  // listenables: MemberActions,\n\n  loaded: false,\n  state: [],\n\n  init() {\n    this.state = [];\n    this.loaded = false;\n  },\n\n  // TODO(dcramer): this should actually come from an action of some sorts\n  loadInitialData(items: User[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(this.state, 'initial');\n  },\n\n  isLoaded() {\n    return this.loaded;\n  },\n\n  getById(id) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    id = '' + id;\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].id === id) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getByEmail(email) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    email = email.toLowerCase();\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].email.toLowerCase() === email) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getAll() {\n    return this.state;\n  },\n};\n\ntype MemberListStore = Reflux.Store & MemberListStoreInterface;\n\nconst MemberListStore = Reflux.createStore(memberListStoreConfig) as MemberListStore;\n\nexport default MemberListStore;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport {Project} from 'app/types';\n\ntype ProjectsStatsStoreInterface = {\n  itemsBySlug: Record<string, Project>;\n\n  getInitialState(): ProjectsStatsStoreInterface['itemsBySlug'];\n  reset(): void;\n  getBySlug(slug: string): Project;\n  getAll(): ProjectsStatsStoreInterface['itemsBySlug'];\n};\n\n/**\n * This is a store specifically used by the dashboard, so that we can\n * clear the store when the Dashboard unmounts\n * (as to not disrupt ProjectsStore which a lot more components use)\n */\nconst projectsStatsStore: Reflux.StoreDefinition & ProjectsStatsStoreInterface = {\n  itemsBySlug: {},\n\n  init() {\n    this.reset();\n    this.listenTo(ProjectActions.loadStatsForProjectSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.update, this.onUpdate);\n    this.listenTo(ProjectActions.updateError, this.onUpdateError);\n  },\n\n  getInitialState() {\n    return this.itemsBySlug;\n  },\n\n  reset() {\n    this.itemsBySlug = {};\n    this.updatingItems = new Map();\n  },\n\n  onStatsLoadSuccess(projects: Project[]) {\n    projects.forEach(project => {\n      this.itemsBySlug[project.slug] = project;\n    });\n    this.trigger(this.itemsBySlug);\n  },\n\n  /**\n   * Optimistic updates\n   * @param projectSlug Project slug\n   * @param data Project data\n   */\n  onUpdate(projectSlug: string, data: Project) {\n    const project = this.getBySlug(projectSlug);\n    this.updatingItems.set(projectSlug, project);\n    if (!project) {\n      return;\n    }\n\n    const newProject: Project = {\n      ...project,\n      ...data,\n    };\n\n    this.itemsBySlug = {\n      ...this.itemsBySlug,\n      [project.slug]: newProject,\n    };\n    this.trigger(this.itemsBySlug);\n  },\n\n  onUpdateSuccess(data: Project) {\n    // Remove project from updating map\n    this.updatingItems.delete(data.slug);\n  },\n\n  /**\n   * Revert project data when there was an error updating project details\n   * @param err Error object\n   * @param data Previous project data\n   */\n  onUpdateError(_err: Error, projectSlug: string) {\n    const project = this.updatingItems.get(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.updatingItems.delete(projectSlug);\n    // Restore old project\n    this.itemsBySlug = {\n      ...this.itemsBySlug,\n      [project.slug]: {...project},\n    };\n    this.trigger(this.itemsBySlug);\n  },\n\n  getAll() {\n    return this.itemsBySlug;\n  },\n\n  getBySlug(slug) {\n    return this.itemsBySlug[slug];\n  },\n};\n\ntype ProjectsStatsStore = Reflux.Store & ProjectsStatsStoreInterface;\n\nconst ProjectsStatsStore = Reflux.createStore(projectsStatsStore) as ProjectsStatsStore;\n\nexport default ProjectsStatsStore;\n","var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"],"sourceRoot":""}