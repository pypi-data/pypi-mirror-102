pipeline {

  environment {
    PATH_HOME = "/home/jenkins"
    PYTHONDONTWRITEBYTECODE = "1"
    PYTHONPYCACHEPREFIX = "/tmp/.pytest_cache"
    FLITVCSMODIFIED = "ignore"
    MAJOR_VERSION = "0"
    MINOR_VERSION = "1"
    GIT_AUTH = credentials('bitbucket-user')
  }

  agent none

  stages {

    stage('Generate new version') {
      agent {
        node {
          label 'master'
          customWorkspace "/home/jenkins/${env.JOB_NAME}"
        }
      }

      stages {

        stage('Add credentials') {
          steps {
            script {
              // Add password file for flit publishing
              sh "cp ${env.PATH_HOME}/.passwd-pypi .env"
            }
          }
        }

        stage('Skip on CI commit') {
          steps {
            script {
              // returnStatus = 1 when string not found -> Team commit
              // returnStatus = 0 when string is found  -> CI commit
              env.LAST_COMMIT_IS_TEAM = sh(
                      script: 'git log -1 | grep "\\[Jenkins CI\\]"',
                      returnStatus: true
              )
              if (LAST_COMMIT_IS_TEAM == '0') {
                println "Last commit has been done by CI, skipping next steps"
              } else {
                println "Last commit has been done by Team, processing"
              }
            }
          }
        }

        stage('Commit new version') {
          when {
            environment name: "LAST_COMMIT_IS_TEAM", value: "1"
          }
          steps {
            script {
              println("attempt to publish with env.BUILD_ID = ${env.BUILD_ID}")
              sh "echo '\"\"\"Sherpa knowledge import plugins\"\"\"' > pyimporters_dummy/__init__.py"
              sh "echo '__version__ = \"${MAJOR_VERSION}.${MINOR_VERSION}.${env.BUILD_ID}\"' >> pyimporters_dummy/__init__.py"
              sh('''
                git config --remove-section credential >/dev/null 2>&1 || true
                git config --remove-section user >/dev/null 2>&1 || true
                git config --global push.default matching
                git config user.name 'Guillaume Karcher'
                git config user.email 'guillaume.karcher@kairntech.com'
                git commit pyimporters_dummy/__init__.py -m "[Jenkins CI] Commit on version files" || echo "No changes to commit"
                git config --local credential.helper "!f() { echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }; f"
                git push
                git config --remove-section credential
                git config --remove-section user
              ''')
            }
          }
        }

      }
    }

    stage('Build, test and publish') {
      when {
        environment name: "LAST_COMMIT_IS_TEAM", value: "1"
      }

      agent {
        dockerfile {
          label 'master'
          customWorkspace "/home/jenkins/${env.JOB_NAME}"
          filename 'Dockerfile'
          args "-u root --privileged -v /tmp/_${env.JOB_NAME}/test-reports:/root/test-reports"
        }
      }

      stages {

        stage('Install flit & flake8') {
          steps {
            sh 'rm -f results.xml'
            sh 'pip install --no-cache-dir flit==3.2.0 flakehell'
            sh 'flit install'
          }
        }

        stage('Lint python code') {
          steps {
            sh 'flakehell lint'
          }
        }

        stage('Test with pytest') {
          steps {
            sh "pytest --verbose -o cache_dir=${PYTHONPYCACHEPREFIX} --junit-xml /root/test-reports/results.xml"
            sh "rm -rf ${PYTHONPYCACHEPREFIX}"
          }
        }

        stage('Publish on PyPI') {
          environment {
            FLIT_USERNAME = getUserName ".env"
            FLIT_PASSWORD = getUserPass ".env"
          }
          steps {
            sh 'rm -rf dist'
            sh 'mkdir dist'
            sh 'flit publish'
            sh 'rm -rf dist'
          }
        }

      }

      post {
        // only triggered when blue or green sign
        //success {
        //}
        // triggered when red sign
        //failure {
        //}
        // trigger every-works
        always {
          sh "ln -s /tmp/_${env.JOB_NAME}/test-reports/results.xml $WORKSPACE"
          junit 'results.xml'

          println "sending Systematic Build notification"
          emailext(body: '${DEFAULT_CONTENT}', mimeType: 'text/html',
                  replyTo: '${DEFAULT_REPLYTO}', subject: '${DEFAULT_SUBJECT}',
                  to: '${DEFAULT_RECIPIENTS}')
        }
      }
    }

  }
}

// return FLIT_USERNAME from given file
def getUserName(path) {
  USERNAME = sh(
                 script: "grep FLIT_USERNAME ${path}|cut -d '=' -f2",
                 returnStdout: true
               ).trim()
  return USERNAME
}

// return FLIT_PASSWORD from given file
def getUserPass(path) {
  USERPASS = sh(
                 script: "grep FLIT_PASSWORD ${path}|cut -d '=' -f2",
                 returnStdout: true
               ).trim()
  return USERPASS
}
