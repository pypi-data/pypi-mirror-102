"""Snap -> function

Revision ID: 3cbdd93d0687
Revises: fcfed9f36be4
Create Date: 2021-04-18 13:35:05.061458

"""
import snapflow
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3cbdd93d0687"
down_revision = "fcfed9f36be4"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("_snapflow_snap_log") as batch_op:
        batch_op.alter_column(
            "snap_key",
            existing_type=sa.String(length=128),
            nullable=False,
            new_column_name="function_key",
        )
        batch_op.alter_column(
            "snap_params",
            existing_type=sa.JSON(),
            nullable=True,
            new_column_name="function_params",
        )
    # op.create_table(
    #     "_snapflow_function_log",
    #     sa.Column("env_id", sa.String(length=64), nullable=True),
    #     sa.Column("created_at", sa.DateTime(), nullable=True),
    #     sa.Column("updated_at", sa.DateTime(), nullable=True),
    #     sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
    #     sa.Column("graph_id", sa.String(length=128), nullable=False),
    #     sa.Column("node_key", sa.String(length=128), nullable=False),
    #     sa.Column("node_start_state", sa.JSON(), nullable=True),
    #     sa.Column("node_end_state", sa.JSON(), nullable=True),
    #     sa.Column("function_key", sa.String(length=128), nullable=False),
    #     sa.Column("function_params", sa.JSON(), nullable=True),
    #     sa.Column("runtime_url", sa.String(length=128), nullable=True),
    #     sa.Column("queued_at", sa.DateTime(), nullable=True),
    #     sa.Column("started_at", sa.DateTime(), nullable=True),
    #     sa.Column("completed_at", sa.DateTime(), nullable=True),
    #     sa.Column("error", sa.JSON(), nullable=True),
    #     sa.ForeignKeyConstraint(["graph_id"], ["_snapflow_graph_metadata.hash"],),
    #     sa.PrimaryKeyConstraint("id"),
    # )
    # op.drop_table("_snapflow_snap_log")
    with op.batch_alter_table("_snapflow_data_block_log") as batch_op:
        batch_op.alter_column(
            "snap_log_id",
            existing_type=sa.Integer(),
            nullable=False,
            new_column_name="function_log_id",
        )
    # op.add_column(
    #     "_snapflow_data_block_log",
    #     sa.Column("function_log_id", sa.Integer(), nullable=False),
    # )
    # op.drop_constraint(
    #     "_snapflow_data_block_log_snap_log_id_fkey",
    #     "_snapflow_data_block_log",
    #     type_="foreignkey",
    # )
    # op.create_foreign_key(
    #     None,
    #     "_snapflow_data_block_log",
    #     "_snapflow_function_log",
    #     ["function_log_id"],
    #     ["id"],
    # )
    # op.drop_column("_snapflow_data_block_log", "snap_log_id")
    # ### end Alembic commands ###


def downgrade():
    pass
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column(
    #     "_snapflow_data_block_log",
    #     sa.Column("snap_log_id", sa.INTEGER(), autoincrement=False, nullable=False),
    # )
    # op.drop_constraint(None, "_snapflow_data_block_log", type_="foreignkey")
    # op.create_foreign_key(
    #     "_snapflow_data_block_log_snap_log_id_fkey",
    #     "_snapflow_data_block_log",
    #     "_snapflow_snap_log",
    #     ["snap_log_id"],
    #     ["id"],
    # )
    # op.drop_column("_snapflow_data_block_log", "function_log_id")
    # op.create_table(
    #     "_snapflow_snap_log",
    #     sa.Column(
    #         "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
    #     ),
    #     sa.Column(
    #         "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
    #     ),
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column(
    #         "graph_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
    #     ),
    #     sa.Column(
    #         "node_key", sa.VARCHAR(length=128), autoincrement=False, nullable=False
    #     ),
    #     sa.Column(
    #         "node_start_state",
    #         postgresql.JSON(astext_type=sa.Text()),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "node_end_state",
    #         postgresql.JSON(astext_type=sa.Text()),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "snap_key", sa.VARCHAR(length=128), autoincrement=False, nullable=False
    #     ),
    #     sa.Column(
    #         "snap_params",
    #         postgresql.JSON(astext_type=sa.Text()),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "runtime_url", sa.VARCHAR(length=128), autoincrement=False, nullable=True
    #     ),
    #     sa.Column(
    #         "queued_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
    #     ),
    #     sa.Column(
    #         "started_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
    #     ),
    #     sa.Column(
    #         "completed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
    #     ),
    #     sa.Column(
    #         "error",
    #         postgresql.JSON(astext_type=sa.Text()),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column("env_id", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    #     sa.ForeignKeyConstraint(
    #         ["graph_id"],
    #         ["_snapflow_graph_metadata.hash"],
    #         name="_snapflow_snap_log_graph_id_fkey",
    #     ),
    #     sa.PrimaryKeyConstraint("id", name="_snapflow_snap_log_pkey"),
    # )
    # op.drop_table("_snapflow_function_log")
    # # ### end Alembic commands ###
