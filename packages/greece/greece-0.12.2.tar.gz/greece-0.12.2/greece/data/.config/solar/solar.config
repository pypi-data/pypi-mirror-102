# Default solar.config file for GREECE model

# This file implements parameters for solar_ghi.py script
#
# All text after a hash (#) is regarded as a comment and
# will be ignored

#-----------------------------------
#               Base layer
#-----------------------------------

# Base layer method: {slope, file}
# Base layer represents the area from which polygons can be cut out
# Either set it as input from shape file, or use a DEM to cut it out
# from slope threshold

BASE_LAYER_METHOD =

# Path to base layer file if method = file

PATH_TO_BASE_LAYER_FILE =

# Slope threshold >= 0 % & <= 100 %

SLOPE_THRESHOLD =

# Sieve filter minimum number of pixel connected

SIEVE_FILTER_MINIMUM_CONNECTION=

# Option for sieve filter: is 8 connected={yes, {no}}

IS_8_CONNECTED =

# Tolerance (in m) when simplifying polygon geometry from slope classification, in
# order to avoid "square-like" shape and speed up computation

SIMPLIFY_TOLERANCE =

#-------------------------------
#           Constraints
#-------------------------------

# Distance threshold
# Distance threshold parameter is used to eliminate polygons too far from a specific layer (such as roads,
# electrical grid, etc.). Directory is where are stored the shape files

PATH_TO_DISTANCE_THRESHOLD_DIRECTORY =

# Config file is a .csv file which gives information about buffers, attribute values, etc.

PATH_TO_DISTANCE_THRESHOLD_CONFIG_FILE =

# Mask
# Mask parameter stands for the layers and buffers which are left out from the study (such as protected
# areas, zones around residential/industrial, etc.)
# Directory is where shapefiles or geojson files are stored

PATH_TO_MASK_DIRECTORY =

# Config file is a .csv file which gives information about buffers, attribute values, etc.

PATH_TO_MASK_CONFIG_FILE =

# Distance to layer
# Compute distance from resulting resource polygons to specific layer(s)
# Directory is where shape and geojson files are stored

PATH_TO_DISTANCE_FROM_POLYGON_TO_LAYER_DIRECTORY =

# Config file is a .csv file which gives information about buffers, attribute values, etc.

PATH_TO_DISTANCE_FROM_POLYGON_TO_LAYER_CONFIG_FILE =

#----------------------------------
#           Polygons
#----------------------------------

# Should distance be computed from polygon centroid ? {True, {False}}

COMPUTE_DISTANCE_FROM_CENTROID =

# Give surface threshold (in m²) into which polygons must be split for faster intersection computation {2000000}

FAST_INTERSECTION_SURFACE_THRESHOLD =

# Minimum surface for which we must keep resource polygon (m²) {0}

MIN_POLYGON_SURFACE =

# Maximum allowed polygon surface (m²)
# For larger areas, polygon will be partitioned into a subset of polygons for which area shall be equal to this value
# by using either graph partitioning or simple split

MAX_POLYGON_SURFACE =

# Method used when splitting polygons according to previous maximum polygon surface {simple, {partition}}

SPLIT_METHOD =

# Split shape {square, {hexagon}}

SPLIT_SHAPE =

#--------------------------------------
#           Partition options
#--------------------------------------

# Disaggregation factor (gives information about how to pre split bigger polygons before aggregating)
DISAGGREGATION_FACTOR =

# Metric precision for weights
METRIC_PRECISION =

# Number of cut tentatives in Metis
METIS_NCUTS =

# Metis objtype option (see Metis documentation)
METIS_OBJTYPE =

# Metis iptype option (see Metis documentation)
METIS_IPTYPE =

# Metis rtype option (see Metis documentation)
METIS_RTYPE =

#-------------------------
#   Candidate features
#-------------------------

# Should we retrieve distance (matrix) between polygons ? {true, {false}}
RETRIEVE_PAIRWISE_DISTANCE =

# Should the model compute shape factor of polygons ? {true, {false}}
# Here we consider shape factor as "circularity"

COMPUTE_SHAPE_FACTOR =

# If shape factor computed, should we use convex hull shape ? {{true}, false}

USE_CONVEX_HULL_SHAPE =

# Should the model compute DEM (slope, aspect, elevation) statistics within polygons ? {true, {false}}

COMPUTE_DEM_STATISTICS =

# Should the model extract land use features from each polygon ? {true, {false}}

EXTRACT_LAND_USE =

#--------------------
#       Resource
#--------------------

# Path to resource file or resource directory

PATH_TO_RESOURCE =

# Resource contour
# Identify resource contour zones ? {True, {False}}

IDENTIFY_RESOURCE_CONTOUR_ZONES =

# Contour interval type {relative, {absolute}}: when relative, value is given in %

CONTOUR_INTERVAL_TYPE =

# Contour interval value (absolute or relative depending on interval type)

CONTOUR_INTERVAL_VALUE =

# Main percentile range (for distribution used in contour definition)

MAIN_PERCENTILE_RANGE =

# Should the model try to generate values for resource ? {true, {false}}

USE_RESOURCE_GENERATOR =

# Resource generator {daily, hourly, daily_and_hourly}
# The solar GHI generator generates daily values from monthly mean or hourly from daily values or both

RESOURCE_GENERATOR =

# Raster format (such as "TIFF", "IMG", etc.) for directory search

RASTER_FORMAT =

# No data value in resource raster

NO_DATA_VALUE =

# If necessary, resample raster before treating it

RESAMPLING_FACTOR =

# Should pixels from resource raster within resulting polygons considered all touched ? {true, {false}}

ALL_TOUCHED =

# Should resource be weighted by surface when extracting from polygons ? {true, {false}}

SURFACE_WEIGHTED =

#--------------------------------------
#       Resource generation
#--------------------------------------

# Time zone {UTC}

TIME_ZONE =

# Integration time step {30}: step in minute used when integrating irradiance. This step must
# be a divisor/multiple of 1 hour. Integration is not performed from sunrise to
# sunset for performance purposes. To get accuracy, prefer using a small time step (e.g. 10)

INTEGRATION_TIME_STEP =

# Base year {2018}: year used in solar geometry computations

BASE_YEAR =

# Daily kc mean tolerance (in %): when generating daily from monthly, tolerance between provided monthly mean value and
# the final mean of the resulting distribution {2}

DAILY_KC_MONTHLY_MEAN_TOLERANCE =

# Hourly GHI sum tolerance (in %): when generating hourly GHI over day, tolerance between original daily GHI and sum of
# hourly values {5}

HOURLY_GHI_DAILY_SUM_TOLERANCE =

#------------------------------
#           OUTPUTS
#------------------------------

# Save resource polygon layer to {.geojson, .shp}

SAVE_POLYGON_LAYER_TO =

# Save resource polygon table attribute to {.csv}

SAVE_POLYGON_TABLE_TO =

# Save distance matrix to {.csv}
SAVE_PAIRWISE_DISTANCE_MATRIX_TO =

# Save corresponding resource table to {.csv}

SAVE_RESOURCE_TABLE_TO =
