
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOUND_CONTENT CLOSE_BINDING COLON COMMA DOLLAR_NUMBER_ID DOLLAR_VAR_ID ESCAPED_CHAR ESCAPED_NEWLINE FALSE FLOAT HEX_NUMBER IDENTIFIER IMPORT INTEGER LBRACE LBRACKET LPAREN MULTIPLY NEWLINE NONE OPEN_BINDING OR QUOTED_INCOMPLETE_STR QUOTED_STR RBRACE RBRACKET RPAREN SEMICOLON SINGLE_BACKSLASH TOKEN TRUE eofgrammar_spec : content emptycontent : content block\n                   | emptyblock : named_grammar\n                 | token_blocktoken_block : TOKEN token_spec_list SEMICOLONtoken_spec_list : token_spec_list COMMA token_unit\n                           | token_unittoken_unit : identifier optional_class_defoptional_class_def : identifier LPAREN optional_token_arguments RPAREN\n                              | emptynamed_grammar : identifier optional_parameter_list COLON rule SEMICOLONterm : term MULTIPLY repeaterempty :quoted_string : QUOTED_STRquoted_split_string : quoted_split_string QUOTED_STR\n                               | QUOTED_STRnumber : integer\n                  | floatinteger : INTEGER\n                   | HEX_NUMBERfloat : FLOATdollar_id : dollar_name\n                     | dollar_numberrepeater : INTEGER\n                    | LPAREN INTEGER RPAREN\n                    | LPAREN INTEGER COLON INTEGER RPARENdollar_name : DOLLAR_VAR_IDdollar_number : DOLLAR_NUMBER_IDterm : LPAREN rule RPARENterm : LBRACE rule RBRACErule : unit_with_binding\n                | rule_alternativesrule_alternatives : unit_with_binding OR unit_with_bindingrule_alternatives : rule_alternatives OR unit_with_bindingunit_with_binding : optional_binding_block unitunit : term_sequenceterm_sequence : term_sequence term_with_bindingterm_sequence : term_with_bindingterm_with_binding : term optional_binding_blockterm : identifierterm : identifier LBRACKET optional_argument_sequence RBRACKEToptional_argument_sequence : argument_sequence\n                                      | emptyoptional_token_arguments : token_argument_sequence\n                                    | emptyargument_sequence : argument_sequence COMMA argument\n                             | argumenttoken_argument_sequence : token_argument_sequence COMMA token_argument\n                                   | token_argumentargument : argument_typestoken_argument : basic_typesargument : parameter_name ASSIGN argument_typestoken_argument : token_parameter_name ASSIGN basic_typesargument_types : dollar_id\n                          | basic_typesbasic_types : number\n                       | string_object\n                       | boolean_true\n                       | boolean_false\n                       | none_objectstring_object : quoted_stringboolean_true : TRUEboolean_false : FALSEnone_object : NONEterm : string_objectidentifier : IDENTIFIER\n                      | usable_keywordsusable_keywords : IMPORT\n                           | TOKEN\n                           | TRUE\n                           | FALSE\n                           | NONEoptional_binding_block : binding_block_sequence\n                                  | emptybinding_block_sequence : binding_block_sequence binding_block\n                                  | binding_blockbinding_block : OPEN_BINDING binding_body CLOSE_BINDINGbinding_body : binding_text\n                        | emptybinding_text : binding_text binding_segment\n                        | binding_segmentbinding_segment : BOUND_CONTENT\n                           | ESCAPED_CHARoptional_parameter_list : LBRACKET parameter_list RBRACKET\n                                   | LBRACKET empty RBRACKET\n                                   | emptyparameter_list : parameter_list COMMA parameter\n                          | parameterparameter : parameter_nameparameter : parameter_name ASSIGN parameter_valueparameter_name : dollar_nametoken_parameter_name : identifierparameter_value : string_object\n                           | dollar_name\n                           | number'
    
_lr_action_items = {'TOKEN':([0,2,3,5,6,7,9,10,11,12,13,14,15,19,22,23,30,31,38,39,40,41,48,49,50,51,53,54,55,56,57,58,59,60,61,62,96,97,102,105,107,108,110,111,129,132,138,],[-14,9,-3,-2,-4,-5,19,-67,-68,-69,-71,-72,-73,-70,19,-14,-6,19,19,-74,-75,-77,19,-12,-14,-14,19,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,-78,19,-13,-25,-30,-31,-42,-26,-27,]),'IDENTIFIER':([0,2,3,5,6,7,9,10,11,12,13,14,15,19,22,23,30,31,38,39,40,41,48,49,50,51,53,54,55,56,57,58,59,60,61,62,96,97,102,105,107,108,110,111,129,132,138,],[-14,10,-3,-2,-4,-5,10,-67,-68,-69,-71,-72,-73,-70,10,-14,-6,10,10,-74,-75,-77,10,-12,-14,-14,10,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,-78,10,-13,-25,-30,-31,-42,-26,-27,]),'IMPORT':([0,2,3,5,6,7,9,10,11,12,13,14,15,19,22,23,30,31,38,39,40,41,48,49,50,51,53,54,55,56,57,58,59,60,61,62,96,97,102,105,107,108,110,111,129,132,138,],[-14,12,-3,-2,-4,-5,12,-67,-68,-69,-71,-72,-73,-70,12,-14,-6,12,12,-74,-75,-77,12,-12,-14,-14,12,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,-78,12,-13,-25,-30,-31,-42,-26,-27,]),'TRUE':([0,2,3,5,6,7,9,10,11,12,13,14,15,19,22,23,30,31,38,39,40,41,48,49,50,51,53,54,55,56,57,58,59,60,61,62,96,97,101,102,105,106,107,108,110,111,129,130,131,132,138,],[-14,13,-3,-2,-4,-5,13,-67,-68,-69,-71,-72,-73,-70,13,-14,-6,13,13,-74,-75,-77,91,-12,-14,-14,13,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,123,-78,91,123,-13,-25,-30,-31,-42,123,123,-26,-27,]),'FALSE':([0,2,3,5,6,7,9,10,11,12,13,14,15,19,22,23,30,31,38,39,40,41,48,49,50,51,53,54,55,56,57,58,59,60,61,62,96,97,101,102,105,106,107,108,110,111,129,130,131,132,138,],[-14,14,-3,-2,-4,-5,14,-67,-68,-69,-71,-72,-73,-70,14,-14,-6,14,14,-74,-75,-77,92,-12,-14,-14,14,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,124,-78,92,124,-13,-25,-30,-31,-42,124,124,-26,-27,]),'NONE':([0,2,3,5,6,7,9,10,11,12,13,14,15,19,22,23,30,31,38,39,40,41,48,49,50,51,53,54,55,56,57,58,59,60,61,62,96,97,101,102,105,106,107,108,110,111,129,130,131,132,138,],[-14,15,-3,-2,-4,-5,15,-67,-68,-69,-71,-72,-73,-70,15,-14,-6,15,15,-74,-75,-77,93,-12,-14,-14,15,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,125,-78,93,125,-13,-25,-30,-31,-42,125,125,-26,-27,]),'$end':([0,1,2,3,4,5,6,7,30,49,],[-14,0,-14,-3,-1,-2,-4,-5,-6,-12,]),'LBRACKET':([8,9,10,11,12,13,14,15,19,58,],[17,-70,-67,-68,-69,-71,-72,-73,-70,101,]),'COLON':([8,9,10,11,12,13,14,15,16,18,43,45,128,],[-14,-70,-67,-68,-69,-71,-72,-73,23,-87,-85,-86,133,]),'SEMICOLON':([10,11,12,13,14,15,19,20,21,22,33,34,35,36,37,39,40,41,47,52,53,54,55,58,59,60,61,62,94,95,96,97,102,104,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,30,-8,-14,-9,-11,49,-32,-33,-74,-75,-77,-7,-36,-37,-39,-14,-41,-66,-62,-15,-76,-34,-35,-38,-40,-78,-10,-13,-25,-30,-31,-42,-26,-27,]),'COMMA':([10,11,12,13,14,15,19,20,21,22,24,26,27,28,29,33,34,47,60,61,69,70,71,72,73,74,75,76,77,78,81,83,84,86,87,88,89,90,91,92,93,104,113,115,116,118,119,120,121,122,123,124,125,126,127,134,135,136,],[-67,-68,-69,-71,-72,-73,-70,31,-8,-14,44,-89,-90,-92,-28,-9,-11,-7,-62,-15,-88,-91,-94,-95,-96,-18,-19,-20,-21,-22,105,-50,-52,-57,-58,-59,-60,-61,-63,-64,-65,-10,130,-48,-51,-55,-56,-23,-24,-29,-63,-64,-65,-49,-54,-47,-53,-23,]),'LPAREN':([10,11,12,13,14,15,19,23,32,38,39,40,41,50,51,53,54,55,56,57,58,59,60,61,62,96,97,98,102,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,-14,48,56,-74,-75,-77,-14,-14,56,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,109,-78,-13,-25,-30,-31,-42,-26,-27,]),'MULTIPLY':([10,11,12,13,14,15,19,55,58,59,60,61,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,98,-41,-66,-62,-15,-13,-25,-30,-31,-42,-26,-27,]),'OPEN_BINDING':([10,11,12,13,14,15,19,23,39,41,50,51,55,56,57,58,59,60,61,62,102,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,42,42,-77,42,42,42,42,42,-41,-66,-62,-15,-76,-78,-13,-25,-30,-31,-42,-26,-27,]),'LBRACE':([10,11,12,13,14,15,19,23,38,39,40,41,50,51,53,54,55,56,57,58,59,60,61,62,96,97,102,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,-14,57,-74,-75,-77,-14,-14,57,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,-78,-13,-25,-30,-31,-42,-26,-27,]),'QUOTED_STR':([10,11,12,13,14,15,19,23,38,39,40,41,46,48,50,51,53,54,55,56,57,58,59,60,61,62,96,97,101,102,105,106,107,108,110,111,129,130,131,132,138,],[-67,-68,-69,-71,-72,-73,-70,-14,61,-74,-75,-77,61,61,-14,-14,61,-39,-14,-14,-14,-41,-66,-62,-15,-76,-38,-40,61,-78,61,61,-13,-25,-30,-31,-42,61,61,-26,-27,]),'OR':([10,11,12,13,14,15,19,36,37,39,40,41,52,53,54,55,58,59,60,61,62,94,95,96,97,102,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,50,51,-74,-75,-77,-36,-37,-39,-14,-41,-66,-62,-15,-76,-34,-35,-38,-40,-78,-13,-25,-30,-31,-42,-26,-27,]),'RPAREN':([10,11,12,13,14,15,19,36,37,39,40,41,48,52,53,54,55,58,59,60,61,62,74,75,76,77,78,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,99,102,107,108,110,111,123,124,125,126,127,128,129,132,137,138,],[-67,-68,-69,-71,-72,-73,-70,-32,-33,-74,-75,-77,-14,-36,-37,-39,-14,-41,-66,-62,-15,-76,-18,-19,-20,-21,-22,104,-45,-46,-50,-52,-57,-58,-59,-60,-61,-63,-64,-65,-34,-35,-38,-40,110,-78,-13,-25,-30,-31,-63,-64,-65,-49,-54,132,-42,-26,138,-27,]),'RBRACE':([10,11,12,13,14,15,19,36,37,39,40,41,52,53,54,55,58,59,60,61,62,94,95,96,97,100,102,107,108,110,111,129,132,138,],[-67,-68,-69,-71,-72,-73,-70,-32,-33,-74,-75,-77,-36,-37,-39,-14,-41,-66,-62,-15,-76,-34,-35,-38,-40,111,-78,-13,-25,-30,-31,-42,-26,-27,]),'ASSIGN':([10,11,12,19,27,28,29,79,85,91,92,93,117,120,],[-67,-68,-69,-70,46,-92,-28,-93,106,-71,-72,-73,131,-92,]),'RBRACKET':([17,24,25,26,27,28,29,60,61,69,70,71,72,73,74,75,76,77,78,86,87,88,89,90,101,112,113,114,115,116,118,119,120,121,122,123,124,125,134,135,136,],[-14,43,45,-89,-90,-92,-28,-62,-15,-88,-91,-94,-95,-96,-18,-19,-20,-21,-22,-57,-58,-59,-60,-61,-14,129,-43,-44,-48,-51,-55,-56,-23,-24,-29,-63,-64,-65,-47,-53,-23,]),'DOLLAR_VAR_ID':([17,44,46,101,130,131,],[29,29,29,29,29,29,]),'CLOSE_BINDING':([42,63,64,65,66,67,68,103,],[-14,102,-79,-80,-82,-83,-84,-81,]),'BOUND_CONTENT':([42,64,66,67,68,103,],[67,67,-82,-83,-84,-81,]),'ESCAPED_CHAR':([42,64,66,67,68,103,],[68,68,-82,-83,-84,-81,]),'INTEGER':([46,48,98,101,105,106,109,130,131,133,],[76,76,108,76,76,76,128,76,76,137,]),'HEX_NUMBER':([46,48,101,105,106,130,131,],[77,77,77,77,77,77,77,]),'FLOAT':([46,48,101,105,106,130,131,],[78,78,78,78,78,78,78,]),'DOLLAR_NUMBER_ID':([101,130,131,],[122,122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'grammar_spec':([0,],[1,]),'content':([0,],[2,]),'empty':([0,2,8,17,22,23,42,48,50,51,55,56,57,101,],[3,4,18,25,34,40,65,82,40,40,40,40,40,114,]),'block':([2,],[5,]),'named_grammar':([2,],[6,]),'token_block':([2,],[7,]),'identifier':([2,9,22,31,38,48,53,105,],[8,22,32,22,58,79,58,79,]),'usable_keywords':([2,9,22,31,38,48,53,105,],[11,11,11,11,11,11,11,11,]),'optional_parameter_list':([8,],[16,]),'token_spec_list':([9,],[20,]),'token_unit':([9,31,],[21,47,]),'parameter_list':([17,],[24,]),'parameter':([17,44,],[26,69,]),'parameter_name':([17,44,101,130,],[27,27,117,117,]),'dollar_name':([17,44,46,101,130,131,],[28,28,72,120,120,136,]),'optional_class_def':([22,],[33,]),'rule':([23,56,57,],[35,99,100,]),'unit_with_binding':([23,50,51,56,57,],[36,94,95,36,36,]),'rule_alternatives':([23,56,57,],[37,37,37,]),'optional_binding_block':([23,50,51,55,56,57,],[38,38,38,97,38,38,]),'binding_block_sequence':([23,50,51,55,56,57,],[39,39,39,39,39,39,]),'binding_block':([23,39,50,51,55,56,57,],[41,62,41,41,41,41,41,]),'unit':([38,],[52,]),'term_sequence':([38,],[53,]),'term_with_binding':([38,53,],[54,96,]),'term':([38,53,],[55,55,]),'string_object':([38,46,48,53,101,105,106,130,131,],[59,71,87,59,87,87,87,87,87,]),'quoted_string':([38,46,48,53,101,105,106,130,131,],[60,60,60,60,60,60,60,60,60,]),'binding_body':([42,],[63,]),'binding_text':([42,],[64,]),'binding_segment':([42,64,],[66,103,]),'parameter_value':([46,],[70,]),'number':([46,48,101,105,106,130,131,],[73,86,86,86,86,86,86,]),'integer':([46,48,101,105,106,130,131,],[74,74,74,74,74,74,74,]),'float':([46,48,101,105,106,130,131,],[75,75,75,75,75,75,75,]),'optional_token_arguments':([48,],[80,]),'token_argument_sequence':([48,],[81,]),'token_argument':([48,105,],[83,126,]),'basic_types':([48,101,105,106,130,131,],[84,119,84,127,119,119,]),'token_parameter_name':([48,105,],[85,85,]),'boolean_true':([48,101,105,106,130,131,],[88,88,88,88,88,88,]),'boolean_false':([48,101,105,106,130,131,],[89,89,89,89,89,89,]),'none_object':([48,101,105,106,130,131,],[90,90,90,90,90,90,]),'repeater':([98,],[107,]),'optional_argument_sequence':([101,],[112,]),'argument_sequence':([101,],[113,]),'argument':([101,130,],[115,134,]),'argument_types':([101,130,131,],[116,116,135,]),'dollar_id':([101,130,131,],[118,118,118,]),'dollar_number':([101,130,131,],[121,121,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> grammar_spec","S'",1,None,None,None),
  ('grammar_spec -> content empty','grammar_spec',2,'p_grammar_spec','compiler.py',126),
  ('content -> content block','content',2,'p_content','compiler.py',132),
  ('content -> empty','content',1,'p_content','compiler.py',133),
  ('block -> named_grammar','block',1,'p_block','compiler.py',143),
  ('block -> token_block','block',1,'p_block','compiler.py',144),
  ('token_block -> TOKEN token_spec_list SEMICOLON','token_block',3,'p_token_block','compiler.py',150),
  ('token_spec_list -> token_spec_list COMMA token_unit','token_spec_list',3,'p_token_spec_list','compiler.py',158),
  ('token_spec_list -> token_unit','token_spec_list',1,'p_token_spec_list','compiler.py',159),
  ('token_unit -> identifier optional_class_def','token_unit',2,'p_token_unit','compiler.py',169),
  ('optional_class_def -> identifier LPAREN optional_token_arguments RPAREN','optional_class_def',4,'p_optional_class_def','compiler.py',177),
  ('optional_class_def -> empty','optional_class_def',1,'p_optional_class_def','compiler.py',178),
  ('named_grammar -> identifier optional_parameter_list COLON rule SEMICOLON','named_grammar',5,'p_named_grammar','compiler.py',190),
  ('term -> term MULTIPLY repeater','term',3,'p_term_multiplier','compiler.py',200),
  ('empty -> <empty>','empty',0,'p_empty','lex_yacc_common.py',211),
  ('quoted_string -> QUOTED_STR','quoted_string',1,'p_quoted_string','lex_yacc_common.py',215),
  ('quoted_split_string -> quoted_split_string QUOTED_STR','quoted_split_string',2,'p_quoted_split_string','lex_yacc_common.py',220),
  ('quoted_split_string -> QUOTED_STR','quoted_split_string',1,'p_quoted_split_string','lex_yacc_common.py',221),
  ('number -> integer','number',1,'p_number','lex_yacc_common.py',230),
  ('number -> float','number',1,'p_number','lex_yacc_common.py',231),
  ('integer -> INTEGER','integer',1,'p_integer','lex_yacc_common.py',236),
  ('integer -> HEX_NUMBER','integer',1,'p_integer','lex_yacc_common.py',237),
  ('float -> FLOAT','float',1,'p_float','lex_yacc_common.py',243),
  ('dollar_id -> dollar_name','dollar_id',1,'p_dollar_id','lex_yacc_common.py',249),
  ('dollar_id -> dollar_number','dollar_id',1,'p_dollar_id','lex_yacc_common.py',250),
  ('repeater -> INTEGER','repeater',1,'p_repeater','compiler.py',255),
  ('repeater -> LPAREN INTEGER RPAREN','repeater',3,'p_repeater','compiler.py',256),
  ('repeater -> LPAREN INTEGER COLON INTEGER RPAREN','repeater',5,'p_repeater','compiler.py',257),
  ('dollar_name -> DOLLAR_VAR_ID','dollar_name',1,'p_dollar_name','lex_yacc_common.py',255),
  ('dollar_number -> DOLLAR_NUMBER_ID','dollar_number',1,'p_dollar_number','lex_yacc_common.py',260),
  ('term -> LPAREN rule RPAREN','term',3,'p_parenthesised_rule','compiler.py',271),
  ('term -> LBRACE rule RBRACE','term',3,'p_optional_rule','compiler.py',276),
  ('rule -> unit_with_binding','rule',1,'p_rule','compiler.py',295),
  ('rule -> rule_alternatives','rule',1,'p_rule','compiler.py',296),
  ('rule_alternatives -> unit_with_binding OR unit_with_binding','rule_alternatives',3,'p_rule_or_rule','compiler.py',301),
  ('rule_alternatives -> rule_alternatives OR unit_with_binding','rule_alternatives',3,'p_alternatives_or_rule','compiler.py',311),
  ('unit_with_binding -> optional_binding_block unit','unit_with_binding',2,'p_rule_with_binding','compiler.py',321),
  ('unit -> term_sequence','unit',1,'p_unit_term','compiler.py',333),
  ('term_sequence -> term_sequence term_with_binding','term_sequence',2,'p_term_sequence','compiler.py',344),
  ('term_sequence -> term_with_binding','term_sequence',1,'p_term_sequence_unit','compiler.py',351),
  ('term_with_binding -> term optional_binding_block','term_with_binding',2,'p_term_with_binding','compiler.py',369),
  ('term -> identifier','term',1,'p_term_identifier','compiler.py',382),
  ('term -> identifier LBRACKET optional_argument_sequence RBRACKET','term',4,'p_term_identifier_with_args','compiler.py',402),
  ('optional_argument_sequence -> argument_sequence','optional_argument_sequence',1,'p_optional_argument_sequence','compiler.py',418),
  ('optional_argument_sequence -> empty','optional_argument_sequence',1,'p_optional_argument_sequence','compiler.py',419),
  ('optional_token_arguments -> token_argument_sequence','optional_token_arguments',1,'p_optional_token_arguments','compiler.py',426),
  ('optional_token_arguments -> empty','optional_token_arguments',1,'p_optional_token_arguments','compiler.py',427),
  ('argument_sequence -> argument_sequence COMMA argument','argument_sequence',3,'p_argument_sequence','compiler.py',434),
  ('argument_sequence -> argument','argument_sequence',1,'p_argument_sequence','compiler.py',435),
  ('token_argument_sequence -> token_argument_sequence COMMA token_argument','token_argument_sequence',3,'p_token_argument_sequence','compiler.py',445),
  ('token_argument_sequence -> token_argument','token_argument_sequence',1,'p_token_argument_sequence','compiler.py',446),
  ('argument -> argument_types','argument',1,'p_argument','compiler.py',456),
  ('token_argument -> basic_types','token_argument',1,'p_token_argument','compiler.py',461),
  ('argument -> parameter_name ASSIGN argument_types','argument',3,'p_argument_with_param_name','compiler.py',466),
  ('token_argument -> token_parameter_name ASSIGN basic_types','token_argument',3,'p_token_argument_with_param_name','compiler.py',472),
  ('argument_types -> dollar_id','argument_types',1,'p_argument_types','compiler.py',478),
  ('argument_types -> basic_types','argument_types',1,'p_argument_types','compiler.py',479),
  ('basic_types -> number','basic_types',1,'p_basic_types','compiler.py',484),
  ('basic_types -> string_object','basic_types',1,'p_basic_types','compiler.py',485),
  ('basic_types -> boolean_true','basic_types',1,'p_basic_types','compiler.py',486),
  ('basic_types -> boolean_false','basic_types',1,'p_basic_types','compiler.py',487),
  ('basic_types -> none_object','basic_types',1,'p_basic_types','compiler.py',488),
  ('string_object -> quoted_string','string_object',1,'p_string_object','compiler.py',493),
  ('boolean_true -> TRUE','boolean_true',1,'p_boolean_true','compiler.py',500),
  ('boolean_false -> FALSE','boolean_false',1,'p_boolean_false','compiler.py',504),
  ('none_object -> NONE','none_object',1,'p_none_object','compiler.py',508),
  ('term -> string_object','term',1,'p_term_quoted_string','compiler.py',512),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','compiler.py',518),
  ('identifier -> usable_keywords','identifier',1,'p_identifier','compiler.py',519),
  ('usable_keywords -> IMPORT','usable_keywords',1,'p_usable_keywords','compiler.py',524),
  ('usable_keywords -> TOKEN','usable_keywords',1,'p_usable_keywords','compiler.py',525),
  ('usable_keywords -> TRUE','usable_keywords',1,'p_usable_keywords','compiler.py',526),
  ('usable_keywords -> FALSE','usable_keywords',1,'p_usable_keywords','compiler.py',527),
  ('usable_keywords -> NONE','usable_keywords',1,'p_usable_keywords','compiler.py',528),
  ('optional_binding_block -> binding_block_sequence','optional_binding_block',1,'p_optional_binding_block','compiler.py',533),
  ('optional_binding_block -> empty','optional_binding_block',1,'p_optional_binding_block','compiler.py',534),
  ('binding_block_sequence -> binding_block_sequence binding_block','binding_block_sequence',2,'p_binding_block_sequence','compiler.py',539),
  ('binding_block_sequence -> binding_block','binding_block_sequence',1,'p_binding_block_sequence','compiler.py',540),
  ('binding_block -> OPEN_BINDING binding_body CLOSE_BINDING','binding_block',3,'p_binding_block','compiler.py',553),
  ('binding_body -> binding_text','binding_body',1,'p_binding_body','compiler.py',558),
  ('binding_body -> empty','binding_body',1,'p_binding_body','compiler.py',559),
  ('binding_text -> binding_text binding_segment','binding_text',2,'p_binding_text','compiler.py',564),
  ('binding_text -> binding_segment','binding_text',1,'p_binding_text','compiler.py',565),
  ('binding_segment -> BOUND_CONTENT','binding_segment',1,'p_binding_segment','compiler.py',578),
  ('binding_segment -> ESCAPED_CHAR','binding_segment',1,'p_binding_segment','compiler.py',579),
  ('optional_parameter_list -> LBRACKET parameter_list RBRACKET','optional_parameter_list',3,'p_optional_parameter_list','compiler.py',584),
  ('optional_parameter_list -> LBRACKET empty RBRACKET','optional_parameter_list',3,'p_optional_parameter_list','compiler.py',585),
  ('optional_parameter_list -> empty','optional_parameter_list',1,'p_optional_parameter_list','compiler.py',586),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','compiler.py',598),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','compiler.py',599),
  ('parameter -> parameter_name','parameter',1,'p_parameter','compiler.py',610),
  ('parameter -> parameter_name ASSIGN parameter_value','parameter',3,'p_parameter_with_defvalue','compiler.py',615),
  ('parameter_name -> dollar_name','parameter_name',1,'p_parameter_name','compiler.py',621),
  ('token_parameter_name -> identifier','token_parameter_name',1,'p_token_parameter_name','compiler.py',626),
  ('parameter_value -> string_object','parameter_value',1,'p_parameter_value','compiler.py',631),
  ('parameter_value -> dollar_name','parameter_value',1,'p_parameter_value','compiler.py',632),
  ('parameter_value -> number','parameter_value',1,'p_parameter_value','compiler.py',633),
]
