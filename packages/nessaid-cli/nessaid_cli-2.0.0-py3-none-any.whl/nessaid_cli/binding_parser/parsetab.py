
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CALL COLON COMMA DOLLAR_NUMBER_ID DOLLAR_VAR_ID ESCAPED_CHAR ESCAPED_NEWLINE FALSE FLOAT HEX_NUMBER IDENTIFIER INTEGER LBRACE LBRACKET LPAREN MULTIPLY NEWLINE NONE OR QUOTED_INCOMPLETE_STR QUOTED_STR RBRACE RBRACKET RPAREN SEMICOLON SINGLE_BACKSLASH TRUE eofbinding_code : empty\n                        | contentcontent : block\n                   | content blockblock : assign_block SEMICOLON\n                 | call_block SEMICOLON\n                 | function_block SEMICOLON\n                 | unused_tokenassign_block : lhs_block ASSIGN rhs_blocklhs_block : dollar_namerhs_block : argumentcall_block : CALL identifier argument_blockfunction_block : identifier argument_blockidentifier : IDENTIFIER\n                      | usable_keywordsusable_keywords : CALL\n                           | TRUE\n                           | FALSE\n                           | NONEargument_block : LPAREN optional_argument_list RPARENoptional_argument_list : argument_list\n                                  | emptyargument_list : argument_list COMMA argument\n                         | argumentargument : dollar_id\n                    | call_block\n                    | function_block\n                    | binding_objectbinding_object : number\n                          | string_object\n                          | boolean_true\n                          | boolean_false\n                          | none_objectstring_object : quoted_stringboolean_true : TRUEboolean_false : FALSEnone_object : NONEunused_token : ESCAPED_NEWLINE\n                        | NEWLINE\n                        | LBRACKET\n                        | RBRACKET\n                        | OR\n                        | AND\n                        | COLON\n                        | LBRACE\n                        | RBRACE\n                        | MULTIPLY\n                        | eofempty :quoted_string : QUOTED_STRquoted_split_string : quoted_split_string QUOTED_STR\n                               | QUOTED_STRnumber : integer\n                  | floatinteger : INTEGER\n                   | HEX_NUMBERfloat : FLOATdollar_id : dollar_name\n                     | dollar_numberdollar_name : DOLLAR_VAR_IDdollar_number : DOLLAR_NUMBER_ID'
    
_lr_action_items = {'$end':([0,1,2,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[-49,0,-1,-2,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'CALL':([0,3,4,8,10,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,38,69,],[10,10,-3,-8,35,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,10,10,10,]),'ESCAPED_NEWLINE':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[12,12,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'NEWLINE':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[13,13,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'LBRACKET':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[14,14,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'RBRACKET':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[15,15,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'OR':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[16,16,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'AND':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[17,17,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'COLON':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[18,18,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'LBRACE':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[19,19,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'RBRACE':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[20,20,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'MULTIPLY':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[21,21,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'eof':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,],[22,22,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,]),'IDENTIFIER':([0,3,4,8,10,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,38,69,],[24,24,-3,-8,24,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,24,24,24,]),'DOLLAR_VAR_ID':([0,3,4,8,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,38,69,],[26,26,-3,-8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,26,26,26,]),'TRUE':([0,3,4,8,10,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,38,69,],[27,27,-3,-8,27,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,56,56,56,]),'FALSE':([0,3,4,8,10,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,38,69,],[28,28,-3,-8,28,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,57,57,57,]),'NONE':([0,3,4,8,10,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,38,69,],[29,29,-3,-8,29,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-4,-5,-6,-7,58,58,58,]),'SEMICOLON':([5,6,7,26,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,],[31,32,33,-60,-13,-9,-11,-25,-26,-27,-28,-58,-59,-29,-30,-31,-32,-33,-61,-53,-54,-34,-35,-36,-37,-55,-56,-57,-50,-12,-20,]),'ASSIGN':([9,23,26,],[34,-10,-60,]),'LPAREN':([10,11,24,25,27,28,29,35,36,56,57,58,],[-16,38,-14,-15,-17,-18,-19,-16,38,-17,-18,-19,]),'COMMA':([26,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,70,],[-60,-13,-25,-26,-27,-28,-58,-59,-29,-30,-31,-32,-33,-61,-53,-54,-34,-35,-36,-37,-55,-56,-57,-50,-12,69,-24,-20,-23,]),'RPAREN':([26,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,],[-60,-13,-49,-25,-26,-27,-28,-58,-59,-29,-30,-31,-32,-33,-61,-53,-54,-34,-35,-36,-37,-55,-56,-57,-50,-12,68,-21,-22,-24,-20,-23,]),'DOLLAR_NUMBER_ID':([34,38,69,],[52,52,52,]),'INTEGER':([34,38,69,],[59,59,59,]),'HEX_NUMBER':([34,38,69,],[60,60,60,]),'FLOAT':([34,38,69,],[61,61,61,]),'QUOTED_STR':([34,38,69,],[62,62,62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'binding_code':([0,],[1,]),'empty':([0,38,],[2,66,]),'content':([0,],[3,]),'block':([0,3,],[4,30,]),'assign_block':([0,3,],[5,5,]),'call_block':([0,3,34,38,69,],[6,6,42,42,42,]),'function_block':([0,3,34,38,69,],[7,7,43,43,43,]),'unused_token':([0,3,],[8,8,]),'lhs_block':([0,3,],[9,9,]),'identifier':([0,3,10,34,38,69,],[11,11,36,11,11,11,]),'dollar_name':([0,3,34,38,69,],[23,23,45,45,45,]),'usable_keywords':([0,3,10,34,38,69,],[25,25,25,25,25,25,]),'argument_block':([11,36,],[37,63,]),'rhs_block':([34,],[39,]),'argument':([34,38,69,],[40,67,70,]),'dollar_id':([34,38,69,],[41,41,41,]),'binding_object':([34,38,69,],[44,44,44,]),'dollar_number':([34,38,69,],[46,46,46,]),'number':([34,38,69,],[47,47,47,]),'string_object':([34,38,69,],[48,48,48,]),'boolean_true':([34,38,69,],[49,49,49,]),'boolean_false':([34,38,69,],[50,50,50,]),'none_object':([34,38,69,],[51,51,51,]),'integer':([34,38,69,],[53,53,53,]),'float':([34,38,69,],[54,54,54,]),'quoted_string':([34,38,69,],[55,55,55,]),'optional_argument_list':([38,],[64,]),'argument_list':([38,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> binding_code","S'",1,None,None,None),
  ('binding_code -> empty','binding_code',1,'p_binding_content','binding_text_parser.py',58),
  ('binding_code -> content','binding_code',1,'p_binding_content','binding_text_parser.py',59),
  ('content -> block','content',1,'p_content','binding_text_parser.py',65),
  ('content -> content block','content',2,'p_content','binding_text_parser.py',66),
  ('block -> assign_block SEMICOLON','block',2,'p_block','binding_text_parser.py',76),
  ('block -> call_block SEMICOLON','block',2,'p_block','binding_text_parser.py',77),
  ('block -> function_block SEMICOLON','block',2,'p_block','binding_text_parser.py',78),
  ('block -> unused_token','block',1,'p_block','binding_text_parser.py',79),
  ('assign_block -> lhs_block ASSIGN rhs_block','assign_block',3,'p_assign_block','binding_text_parser.py',83),
  ('lhs_block -> dollar_name','lhs_block',1,'p_lhs_block','binding_text_parser.py',88),
  ('rhs_block -> argument','rhs_block',1,'p_rhs_block','binding_text_parser.py',93),
  ('call_block -> CALL identifier argument_block','call_block',3,'p_call_block','binding_text_parser.py',98),
  ('function_block -> identifier argument_block','function_block',2,'p_function_block','binding_text_parser.py',106),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','binding_text_parser.py',114),
  ('identifier -> usable_keywords','identifier',1,'p_identifier','binding_text_parser.py',115),
  ('usable_keywords -> CALL','usable_keywords',1,'p_usable_keywords','binding_text_parser.py',120),
  ('usable_keywords -> TRUE','usable_keywords',1,'p_usable_keywords','binding_text_parser.py',121),
  ('usable_keywords -> FALSE','usable_keywords',1,'p_usable_keywords','binding_text_parser.py',122),
  ('usable_keywords -> NONE','usable_keywords',1,'p_usable_keywords','binding_text_parser.py',123),
  ('argument_block -> LPAREN optional_argument_list RPAREN','argument_block',3,'p_argument_block','binding_text_parser.py',128),
  ('optional_argument_list -> argument_list','optional_argument_list',1,'p_optional_argument_list','binding_text_parser.py',133),
  ('optional_argument_list -> empty','optional_argument_list',1,'p_optional_argument_list','binding_text_parser.py',134),
  ('argument_list -> argument_list COMMA argument','argument_list',3,'p_argument_list','binding_text_parser.py',141),
  ('argument_list -> argument','argument_list',1,'p_argument_list','binding_text_parser.py',142),
  ('argument -> dollar_id','argument',1,'p_argument','binding_text_parser.py',152),
  ('argument -> call_block','argument',1,'p_argument','binding_text_parser.py',153),
  ('argument -> function_block','argument',1,'p_argument','binding_text_parser.py',154),
  ('argument -> binding_object','argument',1,'p_argument','binding_text_parser.py',155),
  ('binding_object -> number','binding_object',1,'p_binding_object','binding_text_parser.py',160),
  ('binding_object -> string_object','binding_object',1,'p_binding_object','binding_text_parser.py',161),
  ('binding_object -> boolean_true','binding_object',1,'p_binding_object','binding_text_parser.py',162),
  ('binding_object -> boolean_false','binding_object',1,'p_binding_object','binding_text_parser.py',163),
  ('binding_object -> none_object','binding_object',1,'p_binding_object','binding_text_parser.py',164),
  ('string_object -> quoted_string','string_object',1,'p_string_object','binding_text_parser.py',169),
  ('boolean_true -> TRUE','boolean_true',1,'p_boolean_true','binding_text_parser.py',174),
  ('boolean_false -> FALSE','boolean_false',1,'p_boolean_false','binding_text_parser.py',178),
  ('none_object -> NONE','none_object',1,'p_none_object','binding_text_parser.py',182),
  ('unused_token -> ESCAPED_NEWLINE','unused_token',1,'p_unused_token','binding_text_parser.py',186),
  ('unused_token -> NEWLINE','unused_token',1,'p_unused_token','binding_text_parser.py',187),
  ('unused_token -> LBRACKET','unused_token',1,'p_unused_token','binding_text_parser.py',188),
  ('unused_token -> RBRACKET','unused_token',1,'p_unused_token','binding_text_parser.py',189),
  ('unused_token -> OR','unused_token',1,'p_unused_token','binding_text_parser.py',190),
  ('unused_token -> AND','unused_token',1,'p_unused_token','binding_text_parser.py',191),
  ('unused_token -> COLON','unused_token',1,'p_unused_token','binding_text_parser.py',192),
  ('unused_token -> LBRACE','unused_token',1,'p_unused_token','binding_text_parser.py',193),
  ('unused_token -> RBRACE','unused_token',1,'p_unused_token','binding_text_parser.py',194),
  ('unused_token -> MULTIPLY','unused_token',1,'p_unused_token','binding_text_parser.py',195),
  ('unused_token -> eof','unused_token',1,'p_unused_token','binding_text_parser.py',196),
  ('empty -> <empty>','empty',0,'p_empty','lex_yacc_common.py',211),
  ('quoted_string -> QUOTED_STR','quoted_string',1,'p_quoted_string','lex_yacc_common.py',215),
  ('quoted_split_string -> quoted_split_string QUOTED_STR','quoted_split_string',2,'p_quoted_split_string','lex_yacc_common.py',220),
  ('quoted_split_string -> QUOTED_STR','quoted_split_string',1,'p_quoted_split_string','lex_yacc_common.py',221),
  ('number -> integer','number',1,'p_number','lex_yacc_common.py',230),
  ('number -> float','number',1,'p_number','lex_yacc_common.py',231),
  ('integer -> INTEGER','integer',1,'p_integer','lex_yacc_common.py',236),
  ('integer -> HEX_NUMBER','integer',1,'p_integer','lex_yacc_common.py',237),
  ('float -> FLOAT','float',1,'p_float','lex_yacc_common.py',243),
  ('dollar_id -> dollar_name','dollar_id',1,'p_dollar_id','lex_yacc_common.py',249),
  ('dollar_id -> dollar_number','dollar_id',1,'p_dollar_id','lex_yacc_common.py',250),
  ('dollar_name -> DOLLAR_VAR_ID','dollar_name',1,'p_dollar_name','lex_yacc_common.py',255),
  ('dollar_number -> DOLLAR_NUMBER_ID','dollar_number',1,'p_dollar_number','lex_yacc_common.py',260),
]
