# coding: utf-8

"""
    Veeroute.LSS Stock

    Veeroute.LSS Stock API  # noqa: E501

    The version of the OpenAPI document: 3.8.168700
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from vrt_lss_stock.configuration import Configuration


class BalanceDelta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_index': 'int',
        'delta': 'float'
    }

    attribute_map = {
        'time_index': 'time_index',
        'delta': 'delta'
    }

    def __init__(self, time_index=0, delta=0, local_vars_configuration=None):  # noqa: E501
        """BalanceDelta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._time_index = None
        self._delta = None
        self.discriminator = None

        self.time_index = time_index
        self.delta = delta

    @property
    def time_index(self):
        """Gets the time_index of this BalanceDelta.  # noqa: E501

        Time index.  # noqa: E501

        :return: The time_index of this BalanceDelta.  # noqa: E501
        :rtype: int
        """
        return self._time_index

    @time_index.setter
    def time_index(self, time_index):
        """Sets the time_index of this BalanceDelta.

        Time index.  # noqa: E501

        :param time_index: The time_index of this BalanceDelta.  # noqa: E501
        :type time_index: int
        """
        if self.local_vars_configuration.client_side_validation and time_index is None:  # noqa: E501
            raise ValueError("Invalid value for `time_index`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                time_index is not None and time_index > 1000):  # noqa: E501
            raise ValueError("Invalid value for `time_index`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                time_index is not None and time_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_index = time_index

    @property
    def delta(self):
        """Gets the delta of this BalanceDelta.  # noqa: E501

        The change in the amount of stocks that corresponds to the given time index.  # noqa: E501

        :return: The delta of this BalanceDelta.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this BalanceDelta.

        The change in the amount of stocks that corresponds to the given time index.  # noqa: E501

        :param delta: The delta of this BalanceDelta.  # noqa: E501
        :type delta: float
        """
        if self.local_vars_configuration.client_side_validation and delta is None:  # noqa: E501
            raise ValueError("Invalid value for `delta`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delta is not None and delta > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `delta`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delta is not None and delta < -10000000):  # noqa: E501
            raise ValueError("Invalid value for `delta`, must be a value greater than or equal to `-10000000`")  # noqa: E501

        self._delta = delta

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceDelta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BalanceDelta):
            return True

        return self.to_dict() != other.to_dict()
