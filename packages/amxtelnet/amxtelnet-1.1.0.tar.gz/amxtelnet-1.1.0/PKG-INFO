Metadata-Version: 2.1
Name: amxtelnet
Version: 1.1.0
Summary: xlsx to amx dict list
Home-page: https://github.com/pypa/amxtelnet
Author: Logan Vaughn
Author-email: logantv@gmail.com
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/pypa/amxtelnet/issues
Description: # amxtelnet
        amx telnet functions
        
        Telnet():
        Handles the actual telnet connection and communication with the AMX devices.
        This class is very universal, but if you run into issues using it on a non-AMX
        device, it may be caused by the modifications I had to make for AMX:
        	Using the default telnetlib.py with AMX was causing an infinite handshake loop.
        	- _write() lines 269, 270 disabled IAC (telnet negotiation) doubling.
        	- process_rawq() lines 373, 374 changed when raw chars go to buf when IAC.
        
        
        AMXTelnet():
        Connect to the masters specified in set_systems(),
        Send the command(s) specified in set_requests(), and
        Set config(write_results)=True to save the responses to individual .txt files specified in config(path).
        You can also set config(user_name,password). If you don't, the AMX default logins will be used.
        When you're ready to scan systems, use AMXTelnet.run()
        
        
        ParseAMXResponse():
        Use this class to parse the information gathered from AMXTelnet().
        This class is less universal in that it expects the .txt files to contain responses
        to the following commands in the following order:
        	'show device','get ip','program info','list'
        You can append additional commands as needed.
        The output of ParseAMXResponse().read_telnet_text() is a list of amx system dicts.
        Current uses of this list:
        	export to excel using amxtoexcel.py to archive campus system status
        	code creation using code_creator_django.py or code_creator_usm.py
        
        
        AMXTelnet.path and ParseAMXResponse.path will normally refer to the same location. If you use the
        default locations in each class, they'll work together using systems/telnet responses/.
        
        If there's already .txt files in 'path' you can bypass AMXTelnet() and go straight to ParseAMXResponse()
        if using potentially outdated information is acceptable.
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
