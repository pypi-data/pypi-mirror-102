# Generated by Django 3.1.8 on 2021-04-17 04:42

from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail_easyai.models.project


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtaildocs', '0012_uploadeddocument'),
    ]

    operations = [
        migrations.CreateModel(
            name='MLPipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('data_cleaning', wagtail.core.fields.StreamField([], blank=True, null=True)),
                ('preprocessing', wagtail.core.fields.StreamField([('knn_imputer', wagtail.core.blocks.StructBlock([('n_neighbors', wagtail.core.blocks.IntegerBlock(help_text='The number of neighbors to base the imputation on. Leave blank for sqrt(n)', required=False))]))], blank=True, null=True)),
                ('training', wagtail.core.fields.StreamField([('tpot_classifier', wagtail.core.blocks.StructBlock([('generations', wagtail.core.blocks.IntegerBlock(default=5, help_text='The number of evolutionary generations', min_value=0)), ('population_size', wagtail.core.blocks.IntegerBlock(default=20, help_text='The number of algorithms in each generation', min_value=0)), ('cv', wagtail.core.blocks.IntegerBlock(default=5, help_text='The number of folds to split your data into when cross validating. For example, a fold of 5 will test against each 1/5 of the data', label='Cross Validation Folds', min_value=0)), ('max_time_mins', wagtail.core.blocks.IntegerBlock(help_text='The number of minutes to train the model for (blank for until complete)', label='Train time', min_value=0, required=False)), ('verbosity', wagtail.core.blocks.IntegerBlock(default=2))]))], null=True)),
            ],
            options={
                'verbose_name_plural': 'Pipelines (Workflows)',
            },
        ),
        migrations.CreateModel(
            name='MLProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('train_proportion', models.FloatField(default=0.8, help_text='Proportion of training data that should be used for training (complement will be used for testing)', validators=[wagtail_easyai.models.project.validate_proportion])),
                ('model_scoring_metric', models.CharField(choices=[('accuracy', 'Accuracy'), ('balanced_accuracy', 'Balanced Accuracy')], default='accuracy', max_length=100)),
                ('random_seed', models.IntegerField(blank=True, help_text='The random seed to use when training. Enter a value for reproducibility, or leave blank for a truly random seed', null=True)),
                ('is_fitted', models.BooleanField(default=False)),
                ('pipeline_object', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mlproject_pipeline', to='wagtail_easyai.mlpipeline')),
                ('predict_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mlpredictdata', to='wagtaildocs.document')),
                ('train_x_data', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mltrainydata', to='wagtaildocs.document')),
                ('train_y_data', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mltrainxdata', to='wagtaildocs.document')),
            ],
            options={
                'verbose_name_plural': 'Projects (models)',
            },
        ),
    ]
