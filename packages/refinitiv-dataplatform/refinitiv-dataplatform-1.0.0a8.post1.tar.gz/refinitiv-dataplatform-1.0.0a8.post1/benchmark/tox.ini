# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist = benchmark-{cli,web}-py{36,37,38}-{nix,win},reporting,run,clisimple-py{36,37,38}-{nix,win}
minversion = 3.4
skipsdist = true

[testenv]
allowlist_externals:
    cmd
    /bin/rm
    rm
recreate = false
passenv = DESKTOP_APP_KEY EDP_USERNAME EDP_PASSWORD
deps =
    ../
    benchmark: pickledb
    benchmark: pytest-benchmark
    benchmark: pytest-json-report
    benchmark: pygal
    benchmark: pygaljs
    benchmark: memory_profiler
    benchmark: matplotlib
    benchmark: jinja2
    benchmark: lazy
    cli: docopt
    web: fastapi
    web: uvicorn
commands =
    win: cmd /c del *.log *-refinitiv-data-platform-lib
    nix: - rm *.log *-refinitiv-data-platform-lib
    clisimple: python {posargs}
    cli: python -m benchmark {posargs}
    web:  python -m benchmark.web

[testenv:reporting]
passenv = None
recreate = false
deps =
    pickledb
    jinja2
    lazy
    docopt
commands =
    python -m benchmark reporting

[testenv:run]
passenv = DESKTOP_APP_KEY EDP_USERNAME EDP_PASSWORD
recreate = true
deps =
    ../
    memory_profiler
    lazy
    docopt
commands =
    - python -m benchmark -c '-T 0.1' -b '-i2' -d 'HistoricalPricing.get_events; open session, 1000 reps: call method' run memory_historical_price_loop.py
    - python -m benchmark -c '-T 0.1' -b '-i2' -d 'HistoricalPricing.get_events; 1000 reps: reopen session, call method' run memory_historical_price_session_loop.py
    - python -m benchmark -c '-T 0.1' -b '-i2' -d 'HistoricalPricing.get_summaries; open session, 1000 reps: call method' run memory_historical_price_summaries_loop.py
    - python -m benchmark -c '-T 0.1' -b '-i2' -d 'HistoricalPricing.get_summaries; 1000 reps: reopen session, call method' run memory_historical_price_summaries_session_loop.py
    - python -m benchmark -c '-T 0.1' -b '-s1' -d 'StreamingPrices; open session, open StreamingPrices, wait 80 min' run memory_streaming_prices.py
;    - python -m benchmark -c '-T 0.1' -b '-s1 -i2' -d 'StreamingPrices; open session, 8 reps: reopen prices, wait 10 min' run memory_streaming_prices_loop.py
    - python -m benchmark -c '-T 0.1' -b '-s1 -i2' -d 'StreamingPrices; open session, 8 reps: create prices, wait 10 min' run memory_streaming_prices_create_loop.py
    - python -m benchmark -c '-T 0.1' -b '-s1 -i2' -d 'StreamingPrices; 8 reps: reopen session, create prices, wait 10 min' run memory_streaming_prices_create_session_loop.py
    - python -m benchmark -c '-T 0.1' -b '-s1' -d 'StreamingPrice; open session, open StreamingPrices, wait 80 min' run memory_streaming_price.py
    - python -m benchmark -c '-T 0.1' -b '-s1 -i2' -d 'StreamingPrice; open session, 8 reps: reopen prices, wait 10 min' run memory_streaming_price_loop.py
    - python -m benchmark -c '-T 0.1' -b '-s1 -i2' -d 'StreamingPrice; open session, 8 reps: create prices, wait 10 min' run memory_streaming_price_create_loop.py
    - python -m benchmark -c '-T 0.1' -b '-s1 -i2' -d 'StreamingPrice; 8 reps: reopen session, create prices, wait 10 min' run memory_streaming_price_create_session_loop.py
