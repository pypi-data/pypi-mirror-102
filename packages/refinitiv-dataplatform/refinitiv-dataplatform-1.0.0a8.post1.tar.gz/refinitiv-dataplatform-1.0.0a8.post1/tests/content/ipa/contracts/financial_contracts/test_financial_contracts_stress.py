import pytest

from refinitiv.dataplatform import ContentFactory

from refinitiv.dataplatform.content import ipa

options = [
    "AAPLM152119000", "AAPLM152119500", "AAPLM152120000", "AAPLM152120500", "AAPLM152121000", "AAPLM152121500", "AAPLM152122000", "AAPLM152122500",
    "AAPLM152123000", "AAPLM152123500", "AAPLM152124000", "AAPLM152124500", "AAPLM152125000", "AAPLM152125500", "AAPLM152126000", "AAPLM152126500",
    "AAPLM152127000", "AAPLM152127500", "AAPLM152128000", "AAPLM152128500", "AAPLM152129000", "AAPLM152129500", "AAPLM152130000", "AAPLM152130500",
    "AAPLM152131000", "AAPLM152131500", "AAPLM152132000", "AAPLM152132500", "AAPLM152133000", "AAPLM152133500", "AAPLM152134000", "AAPLM152134500",
    "AAPLM152135000", "AAPLM152135500", "AAPLM152136000", "AAPLM152136500", "AAPLM152137000", "AAPLM152137500", "AAPLM152138000", "AAPLM152138500",
    "AAPLM152139000", "AAPLM152139500", "AAPLM152140000", "AAPLM152140500", "AAPLM152141000", "AAPLM152141500", "AAPLM152142000", "AAPLM152143000",
    "AAPLM152143500", "AAPLM152144500", "AAPLM152145000", "AAPLM152146000", "AAPLA152115500", "AAPLA152116000", "AAPLA152116500", "AAPLA152117000",
    "AAPLA152117500", "AAPLA152118000", "AAPLA152118500", "AAPLA152119000", "AAPLA152119500", "AAPLA152120000", "AAPLA152120500", "AAPLA152121000",
    "AAPLA152121500", "AAPLA152122000", "AAPLA152122500", "AAPLA152123000", "AAPLA152123500", "AAPLA152124000", "AAPLA152124500", "AAPLA152125000",
    "AAPLA152125500", "AAPLA152126000", "AAPLA152126500", "AAPLA152127000", "AAPLA152127500", "AAPLA152128000", "AAPLA152128500", "AAPLA152129000",
    "AAPLA152129500", "AAPLA152130000", "AAPLA152130500", "AAPLA152131000", "AAPLA152131500", "AAPLA152132000", "AAPLA152132500", "AAPLA152133000",
    "AAPLA152133500", "AAPLA152134000", "AAPLA152134500", "AAPLA152135000", "AAPLA152135500", "AAPLA152136000", "AAPLA152136500", "AAPLA152137000",
    "AAPLA152137500", "AAPLA152138000", "AAPLA152138500", "AAPLA152139000", "AAPLA152139500", "AAPLA152140000", "AAPLA152140500", "AAPLA152141000",
    "AAPLA152141500", "AAPLA152142000", "AAPLA152143000", "AAPLA152143500", "AAPLA152144500", "AAPLA152145000", "AAPLA152146000"
]


@pytest.mark.skip
def test_stress(open_session):
    universe = []
    for o in options[:2]:
        universe.append(ipa.option.Definition(
            instrument_code=o
        ))

    df = ipa.get_option_analytics(
        universe=universe
    )

    if df is None:
        pytest.fail(str(ContentFactory._last_error_status))
    assert not df.empty, ContentFactory._last_error_status
