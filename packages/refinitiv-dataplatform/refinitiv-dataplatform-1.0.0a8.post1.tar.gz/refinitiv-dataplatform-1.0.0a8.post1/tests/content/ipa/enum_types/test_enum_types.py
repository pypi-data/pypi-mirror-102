import pytest

from refinitiv.dataplatform.content.ipa.enum_types import *
from refinitiv.dataplatform.content.ipa.contracts.option import UnderlyingType, FxBinaryType, SettlementType, DoubleBinaryType


@pytest.mark.parametrize("test_data", [
    (DayCountBasis, DayCountBasis.DCB_30_360_US),
    (AdjustInterestToPaymentDate, AdjustInterestToPaymentDate.ADJUSTED),
    (AmortizationFrequency, AmortizationFrequency.EVERY12TH_COUPON),
    (AmortizationType, AmortizationType.NONE),
    (Direction, Direction.RECEIVED),
    (IndexCompoundingMethod, IndexCompoundingMethod.MEXICAN_COMPOUNDED),
    (Frequency, Frequency.BI_MONTHLY),
    (InterestType, InterestType.FIXED),
    (BusinessDayConvention, BusinessDayConvention.MODIFIED_FOLLOWING),
    (DateRollingConvention, DateRollingConvention.SAME),
    (StubRule, StubRule.MATURITY),
    (BenchmarkYieldSelectionMode, BenchmarkYieldSelectionMode.NEAREST),
    (PriceSide, PriceSide.MID),
    (ProjectedIndexCalculationMethod, ProjectedIndexCalculationMethod.FORWARD_INDEX),
    (RedemptionDateType, RedemptionDateType.REDEMPTION_AT_PARTIAL_CALL_DATE),
    (Rounding, Rounding.ONE),
    (RoundingType, RoundingType.FACE_DOWN),
    (YieldType, YieldType.MONEY_MARKET_ACTUAL_365),
    (CdsConvention, CdsConvention.ISDA),
    (DocClause, DocClause.MOD_MOD_RESTRUCT03),
    (Seniority, Seniority.SUBORDINATED),
    (BuySell, BuySell.BUY),
    (AverageType, AverageType.ARITHMETIC_STRIKE),
    (FixingFrequency, FixingFrequency.DAILY),
    (InOrOut, InOrOut.IN),
    (UpOrDown, UpOrDown.UP),
    (BinaryType, BinaryType.ONE_TOUCH),
    (CallPut, CallPut.PUT),
    (ExerciseStyle, ExerciseStyle.AMER),
    (UnderlyingType, UnderlyingType.ETI),
    (FxCrossType, FxCrossType.MULTI_LEG),
    (FxLegType, FxLegType.FX_FORWARD),
    (FxSwapCalculationMethod, FxSwapCalculationMethod.FX_SWAP),
    (BarrierMode, BarrierMode.FORWARD_START_WINDOW),
    (FxBinaryType, FxBinaryType.DIGITAL),
    (SettlementType, SettlementType.UNDEFINED),
    (DoubleBinaryType, DoubleBinaryType.NONE),
    (TimeStamp, TimeStamp.DEFAULT),
    (PricingModelType, PricingModelType.WHALEY),
    (VolatilityModel, VolatilityModel.CUBIC_SPLINE),
    (VolatilityType, VolatilityType.IMPLIED),
    (RepoCurveType, RepoCurveType.REPO_CURVE),
    (CalibrationStrategy, CalibrationStrategy.DEFAULT),
    (DividendExtrapolation, DividendExtrapolation.POWER_GROWTH_EXTRAPOL),
    (DividendType, DividendType.YIELD),
    (ForwardComputeMethod, ForwardComputeMethod.USE_FORWARD_CRV_AND_DIVIDENDS),
    (ForwardExtrapolation, ForwardExtrapolation.CST_EXTRAPOL),
    (LocalVolatilityMethod, LocalVolatilityMethod.PARABOLA_SMOOTH),
    (VolType, VolType.CALL),
    (FundingSpreadMethod, FundingSpreadMethod.PARALLEL_CURVE_SHIFT),
    (NumeraireType, NumeraireType.ROLLING_PAYMENT),
    (AmericanMonteCarloMethod, AmericanMonteCarloMethod.ANDERSEN),
    (Method, Method.MONTE_CARLO),
    (IndexResetType, IndexResetType.IN_ARREARS),
    (NotionalExchange, NotionalExchange.NONE),
    (IndexConvexityAdjustmentType, IndexConvexityAdjustmentType.REPLICATION),
    (ExerciseScheduleType, ExerciseScheduleType.USER_DEFINED),
    (SwaptionSettlementType, SwaptionSettlementType.CASH),
    (DiscountingType, DiscountingType.LIBOR_DISCOUNTING),
    (SwaptionVolatilityType, SwaptionVolatilityType.SABR_VOLATILITY_CUBE),
])
def test_enum_types(test_data):
    enum_class, enum_item = test_data
    assert enum_item.value == enum_class.convert_to_str(enum_item), enum_class
    assert enum_item.value == enum_class.normalize(enum_item.name.upper()), enum_class
